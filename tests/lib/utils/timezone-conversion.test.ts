import { describe, test, expect } from "bun:test";

/**
 * üîß Timezone Conversion Test Script
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Bangkok Time ‡πÅ‡∏•‡∏∞ UTC
 */

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á UTC ‡πÄ‡∏õ‡πá‡∏ô Bangkok time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô openEditModal)
function formatForInput(utcDateString) {
  const utcDate = new Date(utcDateString);

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Bangkok timezone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const bangkokTime = new Date(
    utcDate.toLocaleString("en-US", {
      timeZone: "Asia/Bangkok",
    }),
  );

  const year = bangkokTime.getFullYear();
  const month = (bangkokTime.getMonth() + 1).toString().padStart(2, "0");
  const day = bangkokTime.getDate().toString().padStart(2, "0");
  const hours = bangkokTime.getHours().toString().padStart(2, "0");
  const minutes = bangkokTime.getMinutes().toString().padStart(2, "0");

  return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Bangkok time input ‡πÄ‡∏õ‡πá‡∏ô ISO string ‡∏û‡∏£‡πâ‡∏≠‡∏° timezone (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô updateAttendance)
function convertToISOWithTimezone(bangkokTimeString) {
  if (!bangkokTimeString) return null;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° timezone offset ‡∏Ç‡∏≠‡∏á Bangkok (+07:00) ‡πÉ‡∏ô datetime string
  return `${bangkokTimeString}:00+07:00`;
}

describe("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ UTC <-> Bangkok Time", () => {
  test("Case 1: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πâ‡∏≤ (9:00 AM Bangkok = 2:00 AM UTC)", () => {
    const utcMorning = "2025-06-11T02:00:00.000Z";
    const bangkokMorning = formatForInput(utcMorning);
    const backToISO = convertToISOWithTimezone(bangkokMorning);
    expect(backToISO).not.toBeNull(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
    const finalUTC = new Date(backToISO ?? "").toISOString();
    expect(finalUTC).toBe(utcMorning);
  });

  test("Case 2: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡πá‡∏ô (6:00 PM Bangkok = 11:00 AM UTC)", () => {
    const utcEvening = "2025-06-11T11:00:00.000Z";
    const bangkokEvening = formatForInput(utcEvening);
    const backToISOEvening = convertToISOWithTimezone(bangkokEvening);
    expect(backToISOEvening).not.toBeNull(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
    const finalUTCEvening = new Date(backToISOEvening ?? "").toISOString();
    expect(finalUTCEvening).toBe(utcEvening);
  });

  test("Case 3: ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°)", () => {
    const now = new Date();
    const nowUTC = now.toISOString();
    const nowBangkok = formatForInput(nowUTC);
    const nowBackToISO = convertToISOWithTimezone(nowBangkok);
    expect(nowBackToISO).not.toBeNull(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
    const nowFinalUTC = new Date(nowBackToISO ?? "").toISOString();
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (1 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const timeDiff = Math.abs(
      new Date(nowUTC).getTime() - new Date(nowFinalUTC).getTime(),
    );
    expect(timeDiff).toBeLessThan(60000);
  });
});
