/**
 * üîß Timezone Conversion Test Script
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Bangkok Time ‡πÅ‡∏•‡∏∞ UTC
 */

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á UTC ‡πÄ‡∏õ‡πá‡∏ô Bangkok time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô openEditModal)
function formatForInput(utcDateString) {
  const utcDate = new Date(utcDateString);

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Bangkok timezone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const bangkokTime = new Date(
    utcDate.toLocaleString("en-US", {
      timeZone: "Asia/Bangkok",
    }),
  );

  const year = bangkokTime.getFullYear();
  const month = (bangkokTime.getMonth() + 1).toString().padStart(2, "0");
  const day = bangkokTime.getDate().toString().padStart(2, "0");
  const hours = bangkokTime.getHours().toString().padStart(2, "0");
  const minutes = bangkokTime.getMinutes().toString().padStart(2, "0");

  return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Bangkok time input ‡πÄ‡∏õ‡πá‡∏ô ISO string ‡∏û‡∏£‡πâ‡∏≠‡∏° timezone (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô updateAttendance)
function convertToISOWithTimezone(bangkokTimeString) {
  if (!bangkokTimeString) return null;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° timezone offset ‡∏Ç‡∏≠‡∏á Bangkok (+07:00) ‡πÉ‡∏ô datetime string
  return `${bangkokTimeString}:00+07:00`;
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
console.log("üîß Testing Timezone Conversion");
console.log("================================");

// Case 1: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ (9:00 AM Bangkok = 2:00 AM UTC)
const utcMorning = "2025-06-11T02:00:00.000Z";
console.log("\nüìÖ Case 1: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πâ‡∏≤");
console.log("UTC Time (from DB):", utcMorning);

const bangkokMorning = formatForInput(utcMorning);
console.log("Bangkok Time (for input):", bangkokMorning);

const backToISO = convertToISOWithTimezone(bangkokMorning);
console.log("ISO with timezone (to API):", backToISO);

const finalUTC = new Date(backToISO).toISOString();
console.log("Final UTC (in DB):", finalUTC);
console.log("Match original?", utcMorning === finalUTC);

// Case 2: ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô (6:00 PM Bangkok = 11:00 AM UTC)
const utcEvening = "2025-06-11T11:00:00.000Z";
console.log("\nüìÖ Case 2: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡πá‡∏ô");
console.log("UTC Time (from DB):", utcEvening);

const bangkokEvening = formatForInput(utcEvening);
console.log("Bangkok Time (for input):", bangkokEvening);

const backToISOEvening = convertToISOWithTimezone(bangkokEvening);
console.log("ISO with timezone (to API):", backToISOEvening);

const finalUTCEvening = new Date(backToISOEvening).toISOString();
console.log("Final UTC (in DB):", finalUTCEvening);
console.log("Match original?", utcEvening === finalUTCEvening);

// Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
console.log("\nüìÖ Case 3: ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô");
const now = new Date();
const nowUTC = now.toISOString();
console.log("Current UTC:", nowUTC);

const nowBangkok = formatForInput(nowUTC);
console.log("Bangkok Time (for input):", nowBangkok);

const nowBackToISO = convertToISOWithTimezone(nowBangkok);
console.log("Back to ISO:", nowBackToISO);

const nowFinalUTC = new Date(nowBackToISO).toISOString();
console.log("Final UTC:", nowFinalUTC);

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á)
const timeDiff = Math.abs(
  new Date(nowUTC).getTime() - new Date(nowFinalUTC).getTime(),
);
console.log("Time difference (ms):", timeDiff);
console.log("Time difference (seconds):", timeDiff / 1000);

console.log("\n‚úÖ Test completed!");
console.log("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Final UTC ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Original UTC");
