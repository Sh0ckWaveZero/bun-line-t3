/**
 * üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô LINE Messages
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô LINE bubble messages ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
 * ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ double timezone conversion
 */

import { describe, test, expect } from "bun:test";

// üîß Formatting functions ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô LINE utils
const formatThaiTimeOnly = (date: Date): string => {
  const hours = date.getUTCHours().toString().padStart(2, "0");
  const minutes = date.getUTCMinutes().toString().padStart(2, "0");
  return `${hours}:${minutes}`;
};

const convertUTCToBangkok = (utcDate: Date): Date => {
  return new Date(utcDate.getTime() + 7 * 60 * 60 * 1000);
};

describe("üß™ LINE Message Timezone Display", () => {
  describe("üì± Check-in Success Message", () => {
    test("üïê should display correct time for morning check-in", () => {
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á: ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:54
      // UTC: 01:54, Bangkok: 08:54
      const utcCheckIn = new Date("2025-06-09T01:54:00.000Z");
      const bangkokCheckIn = convertUTCToBangkok(utcCheckIn);

      const displayTime = formatThaiTimeOnly(bangkokCheckIn);

      console.log("üß™ Morning Check-in Test:");
      console.log(`   UTC time: ${utcCheckIn.toISOString()}`);
      console.log(`   Bangkok time: ${bangkokCheckIn.toISOString()}`);
      console.log(`   Display time: ${displayTime}`);

      expect(displayTime).toBe("08:54");
    });

    test("üïë should display correct time for late morning check-in", () => {
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10:30
      // UTC: 03:30, Bangkok: 10:30
      const utcCheckIn = new Date("2025-06-09T03:30:00.000Z");
      const bangkokCheckIn = convertUTCToBangkok(utcCheckIn);

      const displayTime = formatThaiTimeOnly(bangkokCheckIn);

      console.log("üß™ Late Morning Check-in Test:");
      console.log(`   UTC time: ${utcCheckIn.toISOString()}`);
      console.log(`   Bangkok time: ${bangkokCheckIn.toISOString()}`);
      console.log(`   Display time: ${displayTime}`);

      expect(displayTime).toBe("10:30");
    });
  });

  describe("üîç Real-world Scenario", () => {
    test("üì± should fix the 16:21 display issue from screenshot", () => {
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 16:21 ‡πÅ‡∏•‡∏∞ 01:21 (‡∏ú‡∏¥‡∏î)
      // ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á 09:21 ‡πÅ‡∏•‡∏∞ 18:21 (‡∏ñ‡∏π‡∏Å)
      console.log("üß™ Fix Screenshot Issue:");

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: check-in ‡πÄ‡∏ß‡∏•‡∏≤ 09:21 (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 16:21)
      const utcCheckIn = new Date("2025-06-09T02:21:00.000Z"); // UTC 02:21
      const bangkokCheckIn = convertUTCToBangkok(utcCheckIn); // Bangkok 09:21
      const bangkokCheckOut = new Date(
        bangkokCheckIn.getTime() + 9 * 60 * 60 * 1000,
      ); // +9 hours

      const checkInTime = formatThaiTimeOnly(bangkokCheckIn);
      const expectedCheckOutTime = formatThaiTimeOnly(bangkokCheckOut);

      console.log(`   üîç UTC Check-in: ${utcCheckIn.toISOString()}`);
      console.log(`   üîç Bangkok Check-in: ${bangkokCheckIn.toISOString()}`);
      console.log(`   üîç Bangkok Check-out: ${bangkokCheckOut.toISOString()}`);
      console.log(`   üì± Display check-in: ${checkInTime}`);
      console.log(`   üì± Display expected checkout: ${expectedCheckOutTime}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û)
      expect(checkInTime).toBe("09:21");
      expect(expectedCheckOutTime).toBe("18:21");

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î (16:21, 01:21)
      expect(checkInTime).not.toBe("16:21");
      expect(expectedCheckOutTime).not.toBe("01:21");

      console.log("   ‚úÖ Fixed! No more double timezone conversion");
    });
  });
});
