/**
 * üß™ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Timezone
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô UTC
 * ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7)
 */

import { describe, test, expect, beforeAll } from "bun:test";

// üîß Import functions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const getCurrentUTCTime = (): Date => {
  return new Date(); // JavaScript Date object ‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÇ‡∏î‡∏¢ default
};

const convertUTCToBangkok = (utcDate: Date): Date => {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á date object ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° +7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å UTC
  const bangkokTime = new Date(utcDate.getTime() + 7 * 60 * 60 * 1000);
  return bangkokTime;
};

const formatThaiTime = (date: Date): string => {
  // ‡πÉ‡∏ä‡πâ UTC methods ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á double timezone conversion
  const year = date.getUTCFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä
  const month = (date.getUTCMonth() + 1).toString().padStart(2, "0");
  const day = date.getUTCDate().toString().padStart(2, "0");
  const hours = date.getUTCHours().toString().padStart(2, "0");
  const minutes = date.getUTCMinutes().toString().padStart(2, "0");
  const seconds = date.getUTCSeconds().toString().padStart(2, "0");

  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
};

const formatThaiTimeOnly = (date: Date): string => {
  // ‡πÉ‡∏ä‡πâ UTC methods ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á double timezone conversion
  const hours = date.getUTCHours().toString().padStart(2, "0");
  const minutes = date.getUTCMinutes().toString().padStart(2, "0");

  return `${hours}:${minutes}`;
};

const isValidCheckInTime = (date: Date): boolean => {
  const hour = date.getUTCHours(); // ‡πÉ‡∏ä‡πâ UTC methods
  const minute = date.getUTCMinutes();
  const timeInMinutes = hour * 60 + minute;

  const earliestTime = 8 * 60; // 08:00
  const latestTime = 11 * 60; // 11:00

  return timeInMinutes >= earliestTime && timeInMinutes <= latestTime;
};

const isWorkingDay = (date: Date): boolean => {
  const dayOfWeek = date.getUTCDay(); // ‡πÉ‡∏ä‡πâ UTC methods
  const workingDays = [1, 2, 3, 4, 5]; // ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏∂‡∏á‡∏®‡∏∏‡∏Å‡∏£‡πå
  return workingDays.includes(dayOfWeek);
};

describe("üß™ Timezone Conversion System", () => {
  describe("üïê UTC Time Generation", () => {
    test("should generate current UTC time", () => {
      const utcTime = getCurrentUTCTime();
      expect(utcTime).toBeInstanceOf(Date);
      expect(utcTime.getTime()).toBeGreaterThan(0);
    });
  });

  describe("üáπüá≠ UTC to Bangkok Conversion", () => {
    test("should convert UTC to Bangkok time (+7 hours)", () => {
      // Test case ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á: 01:54 UTC -> 08:54 Bangkok
      const utcTime = new Date("2025-06-09T01:54:46.208Z");
      const bangkokTime = convertUTCToBangkok(utcTime);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß
      expect(bangkokTime.getUTCHours()).toBe(8);
      expect(bangkokTime.getUTCMinutes()).toBe(54);
      expect(bangkokTime.getUTCSeconds()).toBe(46);
    });

    test("should handle midnight edge case correctly", () => {
      // UTC 18:00 -> Bangkok 01:00 (‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      const utcTime = new Date("2024-01-01T18:00:00.000Z");
      const bangkokTime = convertUTCToBangkok(utcTime);

      expect(bangkokTime.getUTCHours()).toBe(1); // 18 + 7 = 25 -> 01 (‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      expect(bangkokTime.getUTCDate()).toBe(2); // ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2
    });

    test("should handle early morning correctly", () => {
      // UTC 05:00 -> Bangkok 12:00 (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
      const utcTime = new Date("2024-01-01T05:00:00.000Z");
      const bangkokTime = convertUTCToBangkok(utcTime);

      expect(bangkokTime.getUTCHours()).toBe(12);
      expect(bangkokTime.getUTCDate()).toBe(1); // ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    });
  });

  describe("üìù Time Formatting", () => {
    test("should format Thai date time correctly", () => {
      const bangkokTime = new Date("2025-06-09T08:54:46.208Z"); // Bangkok time
      const formatted = formatThaiTime(bangkokTime);

      // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ 09/06/2568 08:54:46 (‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä)
      expect(formatted).toBe("09/06/2568 08:54:46");
    });

    test("should format time only correctly", () => {
      const bangkokTime = new Date("2025-06-09T08:54:46.208Z"); // Bangkok time
      const formatted = formatThaiTimeOnly(bangkokTime);

      // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ 08:54
      expect(formatted).toBe("08:54");
    });

    test("should handle leading zeros correctly", () => {
      const bangkokTime = new Date("2025-06-09T01:05:06.000Z"); // Bangkok time
      const formattedFull = formatThaiTime(bangkokTime);
      const formattedTime = formatThaiTimeOnly(bangkokTime);

      expect(formattedFull).toBe("09/06/2568 01:05:06");
      expect(formattedTime).toBe("01:05");
    });
  });

  describe("‚è∞ Working Hours Validation", () => {
    test("should validate check-in time within working hours", () => {
      // 08:30 Bangkok time
      const bangkokTime = new Date("2025-06-09T08:30:00.000Z");
      const isValid = isValidCheckInTime(bangkokTime);

      expect(isValid).toBe(true);
    });

    test("should reject check-in time before working hours", () => {
      // 07:30 Bangkok time (‡∏Å‡πà‡∏≠‡∏ô 08:00)
      const bangkokTime = new Date("2025-06-09T07:30:00.000Z");
      const isValid = isValidCheckInTime(bangkokTime);

      expect(isValid).toBe(false);
    });

    test("should reject check-in time after working hours", () => {
      // 11:30 Bangkok time (‡∏´‡∏•‡∏±‡∏á 11:00)
      const bangkokTime = new Date("2025-06-09T11:30:00.000Z");
      const isValid = isValidCheckInTime(bangkokTime);

      expect(isValid).toBe(false);
    });

    test("should accept check-in time exactly at boundary", () => {
      // 08:00 Bangkok time (‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
      const bangkokTime08 = new Date("2025-06-09T08:00:00.000Z");
      expect(isValidCheckInTime(bangkokTime08)).toBe(true);

      // 11:00 Bangkok time (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      const bangkokTime11 = new Date("2025-06-09T11:00:00.000Z");
      expect(isValidCheckInTime(bangkokTime11)).toBe(true);
    });
  });

  describe("üìÖ Working Day Validation", () => {
    test("should identify working days correctly", () => {
      // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå (dayOfWeek = 1)
      const monday = new Date("2025-06-09T08:00:00.000Z"); // Monday in UTC
      expect(isWorkingDay(monday)).toBe(true);

      // ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå (dayOfWeek = 5)
      const friday = new Date("2025-06-13T08:00:00.000Z"); // Friday in UTC
      expect(isWorkingDay(friday)).toBe(true);
    });

    test("should identify non-working days correctly", () => {
      // ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå (dayOfWeek = 6)
      const saturday = new Date("2025-06-14T08:00:00.000Z"); // Saturday in UTC
      expect(isWorkingDay(saturday)).toBe(false);

      // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (dayOfWeek = 0)
      const sunday = new Date("2025-06-15T08:00:00.000Z"); // Sunday in UTC
      expect(isWorkingDay(sunday)).toBe(false);
    });
  });

  describe("üîç Integration Tests", () => {
    test("should handle complete check-in flow correctly", () => {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:54 Bangkok (01:54 UTC)
      const utcCheckInTime = new Date("2025-06-09T01:54:46.208Z");

      // 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      const bangkokDisplayTime = convertUTCToBangkok(utcCheckInTime);

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      const isWorking = isWorkingDay(bangkokDisplayTime);
      expect(isWorking).toBe(true); // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const isValidTime = isValidCheckInTime(bangkokDisplayTime);
      expect(isValidTime).toBe(true); // 08:54 ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 08:00-11:00

      // 4. Format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      const displayTime = formatThaiTimeOnly(bangkokDisplayTime);
      expect(displayTime).toBe("08:54"); // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á 08:54 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 15:54

      const fullDisplay = formatThaiTime(bangkokDisplayTime);
      expect(fullDisplay).toBe("09/06/2568 08:54:46");
    });

    test("should prevent double timezone conversion", () => {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏™‡∏î‡∏á 15:54 ‡πÅ‡∏ó‡∏ô 08:54)
      const utcTime = new Date("2025-06-09T01:54:46.208Z");
      const bangkokTime = convertUTCToBangkok(utcTime);

      // ‡πÉ‡∏ä‡πâ UTC methods ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á double conversion
      const hours = bangkokTime.getUTCHours();
      const minutes = bangkokTime.getUTCMinutes();

      // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ 8:54 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 15:54
      expect(hours).toBe(8);
      expect(minutes).toBe(54);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ formatting ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const formatted = formatThaiTimeOnly(bangkokTime);
      expect(formatted).toBe("08:54");
      expect(formatted).not.toBe("15:54"); // ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
    });
  });

  describe("‚ö° Performance Tests", () => {
    test("should handle timezone conversion efficiently", () => {
      const startTime = performance.now();

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 1000 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      for (let i = 0; i < 1000; i++) {
        const utcTime = new Date();
        const bangkokTime = convertUTCToBangkok(utcTime);
        formatThaiTimeOnly(bangkokTime);
      }

      const endTime = performance.now();
      const duration = endTime - startTime;

      // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 100ms
      expect(duration).toBeLessThan(100);
    });
  });
});
