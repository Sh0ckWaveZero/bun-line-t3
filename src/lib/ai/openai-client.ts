import { createOpenAI } from "@ai-sdk/openai";
import { generateText } from "ai";
import { env } from "@/env.mjs";

const openai = createOpenAI({
  apiKey: env.OPENAI_API_KEY || "",
});

export interface RouteCommandParams {
  userMessage: string;
  availableCommands: string;
}

export interface CommandRouteResponse {
  command: string | null;
  parameters: Record<string, any>;
  reasoning: string;
  confidence: number;
}

/**
 * Route natural language command to LINE bot command using OpenAI directly
 */
export async function routeCommand(
  params: RouteCommandParams,
): Promise<CommandRouteResponse> {
  const modelName = env.MCP_AI_MODEL || "gpt-5-nano";

  const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á LINE bot ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
${params.availableCommands}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
  "command": "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
  "parameters": {"‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå": "‡∏Ñ‡πà‡∏≤"},
  "reasoning": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
  "confidence": 0.0-1.0
}

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
- "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢" ‚Üí {"command": "gold", "parameters": {}, "reasoning": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á", "confidence": 1.0}
- "‡∏£‡∏≤‡∏Ñ‡∏≤ Bitcoin" ‚Üí {"command": "bitkub", "parameters": {"coin": "btc"}, "reasoning": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤ BTC ‡∏à‡∏≤‡∏Å Bitkub", "confidence": 0.9}
- "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" ‚Üí {"command": "checkin", "parameters": {}, "reasoning": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "confidence": 1.0}

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;

  try {
    const { text } = await generateText({
      model: openai(modelName),
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: params.userMessage },
      ],
      temperature: 0.3,
    });

    console.log("ü§ñ AI Response:", text);

    // Parse JSON response
    const parsed = JSON.parse(text);
    return {
      command: parsed.command || null,
      parameters: parsed.parameters || {},
      reasoning: parsed.reasoning || "",
      confidence: parsed.confidence || 0,
    };
  } catch (error) {
    console.error("‚ùå OpenAI API error:", error);
    throw error;
  }
}

/**
 * Chat with AI
 */
export async function chat(params: {
  message: string;
  systemPrompt?: string;
}): Promise<{ text: string }> {
  const modelName = env.MCP_AI_MODEL || "gpt-5-nano";
  const systemPrompt =
    params.systemPrompt ||
    "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå";

  try {
    const { text } = await generateText({
      model: openai(modelName),
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: params.message },
      ],
      temperature: 0.7,
    });

    return { text };
  } catch (error) {
    console.error("‚ùå OpenAI Chat error:", error);
    throw error;
  }
}
