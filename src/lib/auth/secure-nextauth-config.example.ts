/**
 * üõ°Ô∏è Example: Secure URL Validation Usage in NextAuth Configuration
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö URL Security ‡πÉ‡∏ô NextAuth config
 */

import { NextAuthOptions } from 'next-auth'
import LineProvider from 'next-auth/providers/line'
import { validateNextAuthUrl, getSafeRedirectUrl } from '@/lib/security/url-validator'

// üîí Security: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment URLs ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const NEXTAUTH_URL = process.env.NEXTAUTH_URL || 'https://line-login.midseelee.com'
const urlValidation = validateNextAuthUrl(NEXTAUTH_URL)

if (!urlValidation.isValid) {
  console.error(`üö® Security: NEXTAUTH_URL validation failed: ${urlValidation.error}`)
  throw new Error('Invalid NEXTAUTH_URL configuration')
}

console.log(`‚úÖ NextAuth URL validated: ${NEXTAUTH_URL} (${urlValidation.isDevelopment ? 'Development' : 'Production'})`)

export const authOptions: NextAuthOptions = {
  providers: [
    LineProvider({
      clientId: process.env.LINE_CLIENT_ID!,
      clientSecret: process.env.LINE_CLIENT_SECRET!,
      // üõ°Ô∏è Security: ‡πÉ‡∏ä‡πâ callback URL ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      authorization: {
        params: {
          scope: 'openid profile',
          // üîí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ NEXTAUTH_URL ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
          redirect_uri: `${NEXTAUTH_URL}/api/auth/callback/line`
        }
      }
    })
  ],
  
  callbacks: {
    // üõ°Ô∏è Security: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö redirect URLs ‡πÉ‡∏ô callback
    async redirect({ url, baseUrl }) {
      console.log(`üîç Redirect request: url="${url}", baseUrl="${baseUrl}"`)
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö URL validation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      const safeRedirectUrl = getSafeRedirectUrl(
        url, 
        '/dashboard', // fallback URL
        urlValidation.isDevelopment ? 'development' : 'production'
      )
      
      console.log(`‚úÖ Safe redirect URL: ${safeRedirectUrl}`)
      return safeRedirectUrl
    },
    
    async signIn({ account, profile, user }) {
      // üîí Security: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö audit trail
      console.log(`üîê Sign-in attempt: provider=${account?.provider}, userId=${user?.id}`)
      
      // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ)
      return true
    },
    
    async session({ session, token }) {
      // üõ°Ô∏è Security: ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å client session
      return {
        ...session,
        user: {
          id: token.sub,
          email: session.user?.email,
          name: session.user?.name,
          image: session.user?.image,
          // ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        }
      }
    }
  },
  
  // üîí Security configuration
  session: {
    strategy: 'jwt',
    maxAge: 24 * 60 * 60, // 24 hours
  },
  
  // üõ°Ô∏è Security: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î pages ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  pages: {
    signIn: '/auth/signin',
    error: '/auth/error',
    // ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  },
  
  // üîí Security headers ‡πÅ‡∏•‡∏∞ configuration
  cookies: {
    sessionToken: {
      name: 'next-auth.session-token',
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: !urlValidation.isDevelopment, // HTTPS ‡πÉ‡∏ô production ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      }
    }
  }
}

export default authOptions
