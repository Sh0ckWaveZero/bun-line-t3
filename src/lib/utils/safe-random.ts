/**
 * üõ°Ô∏è Safe Random Selection Utilities
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Math.random() ‡πÉ‡∏ô components
 */

/**
 * üé≤ Safe random selection ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ timestamp ‡πÅ‡∏ó‡∏ô Math.random()
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
 */
export const safeRandomSelect = <T>(array: readonly T[]): T => {
  if (array.length === 0) {
    throw new Error('Cannot select from empty array');
  }
  
  if (array.length === 1) {
    return array[0]!;
  }
  
  // ‡πÉ‡∏ä‡πâ current timestamp ‡πÄ‡∏õ‡πá‡∏ô seed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà predictable ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  const timestamp = Date.now();
  const index = timestamp % array.length;
  
  return array[index]!;
};

/**
 * üéØ Deterministic random selection based on input string
 * ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
 */
export const deterministicSelect = <T>(array: readonly T[], seed: string): T => {
  if (array.length === 0) {
    throw new Error('Cannot select from empty array');
  }
  
  if (array.length === 1) {
    return array[0]!;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏à‡∏≤‡∏Å seed string
  let hash = 0;
  for (let i = 0; i < seed.length; i++) {
    const char = seed.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  
  const index = Math.abs(hash) % array.length;
  return array[index]!;
};

/**
 * üåä Time-based selection that changes gradually
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å
 */
export const timeBasedSelect = <T>(array: readonly T[], intervalMinutes: number = 60): T => {
  if (array.length === 0) {
    throw new Error('Cannot select from empty array');
  }
  
  if (array.length === 1) {
    return array[0]!;
  }
  
  // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÜ ‡∏ï‡∏≤‡∏° intervalMinutes
  const now = Date.now();
  const intervalMs = intervalMinutes * 60 * 1000;
  const timeSlot = Math.floor(now / intervalMs);
  
  const index = timeSlot % array.length;
  return array[index]!;
};

/**
 * üîÑ Round-robin selection based on counter
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏£‡∏≠‡∏ö
 */
export const roundRobinSelect = <T>(array: readonly T[], counter: number): T => {
  if (array.length === 0) {
    throw new Error('Cannot select from empty array');
  }
  
  const index = counter % array.length;
  return array[index]!;
};

/**
 * üé≠ Context-aware selection for LINE messages
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export const contextAwareSelect = <T>(
  array: readonly T[],
  context: {
    userId?: string;
    timeOfDay?: 'morning' | 'afternoon' | 'evening' | 'night';
    isLate?: boolean;
    dayOfWeek?: number;
  } = {}
): T => {
  if (array.length === 0) {
    throw new Error('Cannot select from empty array');
  }
  
  if (array.length === 1) {
    return array[0]!;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á seed ‡∏à‡∏≤‡∏Å context
  const contextSeed = [
    context.userId || 'anonymous',
    context.timeOfDay || 'unknown',
    context.isLate ? 'late' : 'ontime',
    (context.dayOfWeek || 0).toString(),
    Math.floor(Date.now() / (1000 * 60 * 30)).toString() // 30-minute intervals
  ].join('|');
  
  return deterministicSelect(array, contextSeed);
};

/**
 * üé≤ Generate deterministic random number (0-1) based on time interval
 * ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô Math.random() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch
 */
export const getDeterministicRandom = (intervalMinutes: number = 30): number => {
  const now = Date.now()
  const interval = intervalMinutes * 60 * 1000 // Convert to milliseconds
  const seed = Math.floor(now / interval)
  
  // Simple seeded random using sine
  const x = Math.sin(seed) * 10000
  return x - Math.floor(x)
}

/**
 * üéØ Generate deterministic alpha value for colors
 */
export const getDeterministicAlpha = (): number => {
  return Math.round(getDeterministicRandom(60) * 100) / 100 // Round to 2 decimal places
}
