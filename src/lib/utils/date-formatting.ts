/**
 * üõ°Ô∏è Safe Date Formatting Utilities
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ format dates ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á server/client
 */

/**
 * üéØ Safe date formatting for server-side rendering
 * ‡πÉ‡∏ä‡πâ ISO strings ‡πÅ‡∏•‡∏∞ timezone-aware formatting
 */
export const formatDateSafe = (
  dateString: string | Date,
  options: Intl.DateTimeFormatOptions = {},
  locale = "th-TH",
): string => {
  try {
    const date =
      typeof dateString === "string" ? new Date(dateString) : dateString;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ date ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (isNaN(date.getTime())) {
      return "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    // ‡πÉ‡∏ä‡πâ Bangkok timezone ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const defaultOptions: Intl.DateTimeFormatOptions = {
      timeZone: "Asia/Bangkok",
      ...options,
    };

    return date.toLocaleDateString(locale, defaultOptions);
  } catch (error) {
    console.error("Date formatting error:", error);
    return "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
  }
};

/**
 * üïê Safe time formatting for server-side rendering
 */
export const formatTimeSafe = (
  dateString: string | Date,
  options: Intl.DateTimeFormatOptions = {},
  locale = "th-TH",
): string => {
  try {
    const date =
      typeof dateString === "string" ? new Date(dateString) : dateString;

    if (isNaN(date.getTime())) {
      return "‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    const defaultOptions: Intl.DateTimeFormatOptions = {
      timeZone: "Asia/Bangkok",
      hour: "2-digit",
      minute: "2-digit",
      ...options,
    };

    return date.toLocaleTimeString(locale, defaultOptions);
  } catch (error) {
    console.error("Time formatting error:", error);
    return "‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
  }
};

/**
 * üìÖ Safe date and time formatting
 */
export const formatDateTimeSafe = (
  dateString: string | Date,
  locale = "th-TH",
): string => {
  try {
    const date =
      typeof dateString === "string" ? new Date(dateString) : dateString;

    if (isNaN(date.getTime())) {
      return "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    return date.toLocaleString(locale, {
      timeZone: "Asia/Bangkok",
      year: "numeric",
      month: "long",
      day: "numeric",
      weekday: "long",
      hour: "2-digit",
      minute: "2-digit",
    });
  } catch (error) {
    console.error("DateTime formatting error:", error);
    return "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
  }
};

/**
 * üóìÔ∏è Predefined formatting functions
 */
export const dateFormatters = {
  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏ä‡πà‡∏ô "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ó‡∏µ‡πà 14 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2025"
  fullDate: (dateString: string) =>
    formatDateSafe(dateString, {
      year: "numeric",
      month: "long",
      day: "numeric",
      weekday: "long",
    }),

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "14/06/2025"
  shortDate: (dateString: string) =>
    formatDateSafe(dateString, {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    }),

  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏ä‡πà‡∏ô "14:30"
  time24: (dateString: string) =>
    formatTimeSafe(dateString, {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    }),

  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏ä‡πà‡∏ô "2:30 PM"
  time12: (dateString: string) =>
    formatTimeSafe(dateString, {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    }),

  // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ ‡πÄ‡∏ä‡πà‡∏ô "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2025"
  monthYear: (dateString: string) =>
    formatDateSafe(dateString, {
      year: "numeric",
      month: "long",
    }),

  // ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÄ‡∏ä‡πà‡∏ô "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå"
  weekday: (dateString: string) =>
    formatDateSafe(dateString, {
      weekday: "long",
    }),
} as const;

/**
 * üî¢ Safe number formatting for hours
 */
export const formatHoursSafe = (hours: number | null): string => {
  if (hours === null || hours === undefined) return "-";

  // Round to 1 decimal place
  const rounded = Math.round(hours * 10) / 10;
  return `${rounded} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
};

/**
 * üé® Get status color class safely
 */
export const getStatusColorSafe = (status: string): string => {
  const colorMap: Record<string, string> = {
    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥: "text-green-600",
    ‡∏°‡∏≤‡∏™‡∏≤‡∏¢: "text-yellow-600",
    ‡∏•‡∏≤‡∏á‡∏≤‡∏ô: "text-red-600",
    ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô: "text-gray-600",
  };

  return colorMap[status] ?? "text-gray-500";
};
