"use client";

import { useEffect, useState } from 'react';
import Head from 'next/head';
import { useSafeHydration } from '@/hooks/useHydrationSafe';
import '~/styles/help.css';

interface CommandCategory {
  title: string;
  description: string;
  commands: Command[];
}

interface Command {
  name: string;
  aliases: string[];
  description: string;
  usage: string;
  examples: string[];
}

export default function HelpPage() {
  const [categories, setCategories] = useState<CommandCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  // üõ°Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡∏à‡∏≤‡∏Å dynamic date
  const currentYear = useSafeHydration(
    2025, // server-side fallback
    () => new Date().getFullYear() // client-side value
  );

  useEffect(() => {
    // In a real application, you might fetch this from an API endpoint
    // For now, we'll hardcode the commands data structure
    const commandsData: CommandCategory[] = [
      {
        title: "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
        description: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô",
        commands: [
          {
            name: "work",
            aliases: ["‡∏á‡∏≤‡∏ô", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "checkin"],
            description: "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
            usage: "/work",
            examples: ["/work", "/‡∏á‡∏≤‡∏ô", "/‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "/checkin"]
          },
          {
            name: "checkout",
            aliases: ["‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô"],
            description: "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            usage: "/checkout",
            examples: ["/checkout", "/‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", "/‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô"]
          },
          {
            name: "status",
            aliases: ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
            description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
            usage: "/status",
            examples: ["/status", "/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
          },
          {
            name: "report",
            aliases: ["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            usage: "/report",
            examples: ["/report", "/‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"]
          },
          {
            name: "policy",
            aliases: ["‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢", "‡∏Å‡∏é", "rule"],
            description: "‡∏î‡∏π‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
            usage: "/policy",
            examples: ["/policy", "/‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢", "/‡∏Å‡∏é", "/rule"]
          }
        ]
      },
      {
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Ñ‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡∏µ",
        description: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Ñ‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡∏µ",
        commands: [
          {
            name: "bitkub",
            aliases: ["bk"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å Bitkub",
            usage: "/bk [symbol]",
            examples: ["/bk btc", "/bitkub eth", "/bk btc eth"]
          },
          {
            name: "satang",
            aliases: ["st"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å Satang Pro",
            usage: "/st [symbol]",
            examples: ["/st btc", "/satang eth", "/st btc eth"]
          },
          {
            name: "bitazza",
            aliases: ["btz"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å Bitazza",
            usage: "/btz [symbol]",
            examples: ["/btz btc", "/bitazza eth", "/btz btc eth"]
          },
          {
            name: "binance",
            aliases: ["bn", "bnbusd"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å Binance",
            usage: "/bn [symbol] ‡∏´‡∏£‡∏∑‡∏≠ /bnbusd [symbol]",
            examples: ["/bn btc", "/binance eth", "/bnbusd sol"]
          },
          {
            name: "gateio",
            aliases: ["gate", "gt"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å Gate.io",
            usage: "/gate [symbol]",
            examples: ["/gate btc", "/gateio eth", "/gt sol"]
          },
          {
            name: "mexc",
            aliases: ["mx"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å MEXC",
            usage: "/mexc [symbol]",
            examples: ["/mexc btc", "/mx eth"]
          },
          {
            name: "cmc",
            aliases: ["coinmarketcap"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏à‡∏≤‡∏Å CoinMarketCap",
            usage: "/cmc [symbol]",
            examples: ["/cmc btc", "/coinmarketcap eth"]
          }
        ]
      },
      {
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
        description: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
        commands: [
          {
            name: "gold",
            aliases: ["‡∏ó‡∏≠‡∏á"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
            usage: "/gold",
            examples: ["/gold", "/‡∏ó‡∏≠‡∏á"]
          },
          {
            name: "lotto",
            aliases: ["‡∏´‡∏ß‡∏¢"],
            description: "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•",
            usage: "/‡∏´‡∏ß‡∏¢ [‡∏á‡∏ß‡∏î]",
            examples: ["/‡∏´‡∏ß‡∏¢ 16/04/2566", "/lotto 16/04/2566"]
          },
          {
            name: "gas",
            aliases: ["‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô"],
            description: "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
            usage: "/gas [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó]",
            examples: ["/gas diesel", "/‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô"]
          },
          {
            name: "help",
            aliases: ["‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "commands"],
            description: "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            usage: "/help",
            examples: ["/help", "/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "/commands"]
          }
        ]
      }
    ];
    
    setCategories(commandsData);
    setLoading(false);
  }, []);

  const filteredCategories = categories.map(category => {
    const filteredCommands = category.commands.filter(cmd => 
      cmd.name.includes(searchTerm.toLowerCase()) || 
      cmd.aliases.some(alias => alias.includes(searchTerm.toLowerCase())) ||
      cmd.description.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    return {
      ...category,
      commands: filteredCommands
    };
  }).filter(category => category.commands.length > 0);

  return (
    <div className="min-h-screen bg-gray-50 font-sans prompt-text">
      <Head>
        <title>LINE Bot ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î | Bun LINE T3</title>
        <meta name="description" content="‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á LINE Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="max-w-6xl mx-auto py-8 px-4">
        <header className="mb-10 text-center">
          <h1 className="text-4xl font-bold text-gray-800 mb-4 tracking-tight leading-tight">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á LINE Bot</h1>
          <p className="text-lg text-gray-600 mb-6 font-light leading-relaxed">‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó LINE ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</p>
          
          <div className="max-w-xl mx-auto">
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á..."
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none font-light"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </header>

        <main>
          {loading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
            </div>
          ) : (
            <div className="space-y-16">
              {filteredCategories.map((category, idx) => (
                <section key={idx} className="bg-white rounded-lg shadow-md overflow-hidden">
                  <div className="bg-indigo-600 p-6">
                    <h2 className="text-2xl font-bold text-white tracking-tight">{category.title}</h2>
                    <p className="text-indigo-100 mt-1 font-light">{category.description}</p>
                  </div>
                  
                  <div className="table-divider table-divide-light">
                    {category.commands.map((command, cmdIdx) => (
                      <div key={cmdIdx} className="p-6">
                        <div className="flex flex-wrap gap-2 mb-3">
                          <span className="bg-indigo-100 text-indigo-800 font-medium px-3 py-1 rounded-full text-sm">/{command.name}</span>
                          {command.aliases.map((alias, aliasIdx) => (
                            <span key={aliasIdx} className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-light">/{alias}</span>
                          ))}
                        </div>
                        
                        <p className="text-gray-700 mb-4 font-light">{command.description}</p>
                        
                        <div className="mb-4">
                          <h4 className="text-sm font-semibold text-gray-500 uppercase mb-2 tracking-wider">‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h4>
                          <code className="bg-gray-100 text-gray-800 px-2 py-1 rounded font-medium code-text">{command.usage}</code>
                        </div>
                        
                        <div>
                          <h4 className="text-sm font-semibold text-gray-500 uppercase mb-2 tracking-wider">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</h4>
                          <div className="flex flex-wrap gap-2">
                            {command.examples.map((example, exIdx) => (
                              <code key={exIdx} className="bg-gray-100 text-gray-800 px-2 py-1 rounded font-medium code-text">{example}</code>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </section>
              ))}
            </div>
          )}

          {!loading && filteredCategories.length === 0 && (
            <div className="text-center py-16">
              <h3 className="text-xl font-medium text-gray-700">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
              <p className="text-gray-500 mt-2 font-light">‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
            </div>
          )}
        </main>

        <footer className="mt-16 text-center text-gray-500 text-sm font-light">
          <p>¬© {currentYear} Bun LINE T3. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÑ‡∏î‡πâ</p>
        </footer>
      </div>
    </div>
  );
}
