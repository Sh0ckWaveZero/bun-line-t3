import { NextRequest } from 'next/server';
import { headers } from 'next/headers';
import { env } from '@/env.mjs';
import { attendanceService } from '@/features/attendance/services/attendance';
import { holidayService } from '@/features/attendance/services/holidays';
import { selectRandomElement } from '@/lib/crypto-random';
import { RateLimiter } from '@/lib/utils/rate-limiter';

// Helper function to send broadcast message
const sendBroadcastMessage = async (messages: any[]) => {
  const lineChannelAccessToken = env.LINE_CHANNEL_ACCESS;
  const lineHeader = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${lineChannelAccessToken}`,
  };

  try {
    const response = await fetch(`${env.LINE_MESSAGING_API}/broadcast`, {
      method: 'POST',
      headers: lineHeader,
      body: JSON.stringify({
        messages: messages,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send broadcast message');
    }

    return response;
  } catch (err: any) {
    console.error('Error sending broadcast message:', err.message);
    throw err;
  }
};

// Check if today is a working day (Monday-Friday, excluding holidays from MongoDB)
const isWorkingDay = async (): Promise<boolean> => {
  const now = attendanceService.getCurrentBangkokTime();
  const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  
  // Check if it's Monday (1) to Friday (5)
  if (dayOfWeek < 1 || dayOfWeek > 5) {
    return false;
  }
  
  // Check if today is a public holiday from MongoDB
  const isHoliday = await holidayService.isPublicHoliday(now);
  if (isHoliday) {
    console.log('üìÖ Today is a public holiday, skipping check-in reminder');
    return false;
  }
  
  return true;
};

// Array of 20 gentle, friendly check-in reminder messages
const checkInReminderMessages = [
  "üåÖ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚ú®",
  "‚òÄÔ∏è ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡πà‡∏∞! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
  "üå∏ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ üåü",
  "üå± ‡∏ï‡∏∑‡πà‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏∞? ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üíö",
  "üé∂ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ üéµ",
  "üåû ‡∏´‡∏ß‡∏≤‡∏î‡∏î‡∏µ! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚úåÔ∏è",
  "üå∫ ‡πÄ‡∏ä‡πâ‡∏≤‡∏™‡∏î‡πÉ‡∏™! ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏∞ üåà",
  "‚òï ‡∏Å‡∏≤‡πÅ‡∏ü‡∏´‡∏≠‡∏° ‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚ò∫Ô∏è",
  "üåÑ ‡∏≠‡∏£‡∏∏‡∏ì‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏≤‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡∏ô‡∏∞ üöÄ",
  "üéã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üåü",
  "üåÖ ‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏ô‡∏î‡∏µ! ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏à‡∏∞‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ üí´",
  "üéÄ ‡πÄ‡∏ä‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏™‡∏î‡πÉ‡∏™! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ üåª",
  "üå∏ ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡πà‡∏∞! ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÜ ‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? üí™",
  "üçÉ ‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üåø",
  "üé® ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üñåÔ∏è",
  "üå§Ô∏è ‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ ‚òÄÔ∏è",
  "üé™ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? üé≠",
  "üåä ‡πÑ‡∏´‡∏•‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà! ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ üåä",
  "ü¶ã ‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏™! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏∞ ü¶ã",
  "üéà ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ö‡∏≤‡∏™‡∏ö‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üéà"
] as const;

/**
 * Morning Check-in Reminder Cron Job
 * This endpoint sends friendly reminders to all users at 8:00 AM on weekdays
 * to encourage them to check in for work
 */
export async function GET(req: NextRequest) {
  try {
    // Apply rate limiting
    const rateLimitResponse = await RateLimiter.checkCronRateLimit(req);
    if (rateLimitResponse) {
      return rateLimitResponse;
    }

    const headersList = await headers();
    
    // Verify that this request is coming from Vercel Cron or authorized source
    const authHeader = headersList.get('authorization');
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('üåÖ Vercel Cron: Running check-in reminder job...');
    
    // Check if today is a working day (including MongoDB holiday check)
    if (!(await isWorkingDay())) {
      // Get additional holiday info for logging
      const currentBangkokTime = attendanceService.getCurrentBangkokTime();
      const holidayInfo = await holidayService.getHolidayInfo(currentBangkokTime);
      
      let reason = 'not a working day';
      if (holidayInfo) {
        reason = `public holiday: ${holidayInfo.nameThai} (${holidayInfo.nameEnglish})`;
        console.log(`üéâ Today is ${holidayInfo.nameThai} (${holidayInfo.nameEnglish}), skipping reminder`);
      } else {
        console.log('üìÖ Today is not a working day (weekend), skipping reminder');
      }
      
      return Response.json({ 
        success: true, 
        message: `Skipped - ${reason}`,
        holidayInfo: holidayInfo ? {
          nameThai: holidayInfo.nameThai,
          nameEnglish: holidayInfo.nameEnglish,
          type: holidayInfo.type
        } : null,
        timestamp: new Date().toISOString()
      }, { status: 200 });
    }
    
    // Get current Bangkok time
    const currentBangkokTime = attendanceService.getCurrentBangkokTime();
    const currentHour = currentBangkokTime.getHours();
    
    // Double-check time (should be around 8 AM)
    if (currentHour !== 8) {
      console.log(`‚è∞ Current time is ${currentHour}:00, check-in reminder is for 8:00 AM only`);
      return Response.json({ 
        success: true, 
        message: `Skipped - not the right time (${currentHour}:00)`,
        timestamp: new Date().toISOString()
      }, { status: 200 });
    }
    
    // Select a random friendly message
    const randomMessage = selectRandomElement(checkInReminderMessages);
    
    // Create the broadcast message with a simple text and check-in button
    const messages = [
      {
        type: 'text',
        text: randomMessage
      },
      {
        type: 'template',
        altText: '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô',
        template: {
          type: 'buttons',
          text: 'üëÜ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢',
          actions: [
            {
              type: 'postback',
              label: 'üè¢ ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô',
              data: 'action=checkin',
            }
          ]
        }
      }
    ];
    
    // Send broadcast message to all users
    await sendBroadcastMessage(messages);
    
    console.log('‚úÖ Check-in reminder broadcast sent successfully');
    
    return Response.json({ 
      success: true, 
      message: 'Check-in reminder broadcast sent successfully',
      messageText: randomMessage,
      timestamp: new Date().toISOString()
    }, { status: 200 });

  } catch (error: any) {
    console.error('‚ùå Error in check-in reminder job:', error);
    return Response.json({ 
      success: false, 
      error: 'Failed to send check-in reminder',
      details: error.message,
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
