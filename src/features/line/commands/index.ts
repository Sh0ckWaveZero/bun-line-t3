import { handleExchangeCommand } from "./handleExchangeCommand";
import { handleGoldCommand } from "./handleGoldCommand";
import { handleLottoCommand } from "./handleLottoCommand";
import { handleGasCommand } from "./handleGasCommand";
import { handleCheckInCommand } from "./handleCheckInCommand";
import { handleCheckOutCommand } from "./handleCheckOutCommand";
import { handleWorkAttendanceCommand } from "./handleWorkAttendanceCommand";
import { handleReportCommand } from "./handleReportCommand";
import { handleStatusCommand } from "./handleStatusCommand";
import { handleHelpCommand } from "./handleHelpCommand";
import { handlePolicyInfo } from "./handlePolicyInfo";
import { handleLeaveCommandWrapper } from "./handleLeaveCommandWrapper";
import { handleDefaultCommand } from "./handleDefaultCommand";
import { handleChartCommand, parseChartCommand } from "./handleChartCommand";
import { handleSettingsCommand } from "./handleSettingsCommand";
import { handleIdGenerator } from "./handleIdGenerator";
import { handleHealthCommand } from "./handleHealthCommand";
import { handleAiCommand } from "./handleAiCommand";

const { sendMessage } = await import("@/lib/utils/line-utils");

export const handleCommand = async (
  command: string,
  conditions: any[],
  req: any,
) => {
  // Exchange group
  if (
    [
      "bk",
      "bitkub",
      "st",
      "satang",
      "btz",
      "bitazza",
      "bn",
      "binance",
      "bnbusd",
      "gate",
      "gateio",
      "gt",
      "mexc",
      "mx",
      "cmc",
      "coinmarketcap",
    ].includes(command)
  ) {
    const handled = await handleExchangeCommand(command, conditions, req);
    if (handled) return;
  }
  // Gold
  if (["gold", "‡∏ó‡∏≠‡∏á"].includes(command)) {
    await handleGoldCommand(req);
    return;
  }
  // Lotto
  if (["‡∏´‡∏ß‡∏¢", "lotto"].includes(command)) {
    await handleLottoCommand(conditions, req);
    return;
  }
  // Gas
  if (["gas", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô"].includes(command)) {
    await handleGasCommand(conditions, req);
    return;
  }
  // Work
  if (["work", "‡∏á‡∏≤‡∏ô"].includes(command)) {
    await handleWorkAttendanceCommand(req);
    return;
  }
  // Checkin
  if (["checkin", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô"].includes(command)) {
    await handleCheckInCommand(req);
    return;
  }
  // Checkout
  if (["‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô", "checkout"].includes(command)) {
    await handleCheckOutCommand(req);
    return;
  }
  // Report
  if (["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "report"].includes(command)) {
    await handleReportCommand(req);
    return;
  }
  // Status
  if (["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "status"].includes(command)) {
    await handleStatusCommand(req);
    return;
  }
  // Help
  if (["‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "help", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "commands"].includes(command)) {
    await handleHelpCommand(req);
    return;
  }
  // Policy
  if (["‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢", "policy", "‡∏Å‡∏é", "rule"].includes(command)) {
    await handlePolicyInfo(req);
    return;
  }
  // Leave
  if (["leave", "‡∏•‡∏≤"].includes(command)) {
    await handleLeaveCommandWrapper(conditions, req);
    return;
  }
  // Settings
  if (
    [
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      "settings",
      "setting",
      "config",
      "preferences",
      "pref",
    ].includes(command)
  ) {
    await handleSettingsCommand(req, conditions);
    return;
  }
  // Thai ID Generator
  if (
    [
      // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ï‡πá‡∏°)
      "‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£",
      "‡∏™‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
      "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
      "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
      "‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
      "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
      "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£",
      "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏±‡∏ï‡∏£",
      "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",

      // ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÄ‡∏ï‡πá‡∏°)
      "random id",
      "generate id",
      "random thai id",
      "generate thai id",
      "create id card",
      "create thai id",
      "random citizen id",
      "generate citizen id",
      "validate id",
      "check id",
      "verify id",
      "validate thai id",
      "check thai id",
      "verify thai id",
      "validate citizen id",
      "check citizen id",
      "verify citizen id",

      // ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏¢‡πà‡∏≠)
      "id card",
      "thai id",
      "gen id",
      "rand id",
      "new id",
      "create id",
      "make id",
      "valid id",
      "checkid",
      "verifyid",
      "validateid",
    ].includes(command)
  ) {
    await handleIdGenerator(req);
    return;
  }
  // Health
  if (
    [
      "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
      "health",
      "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
      "activity",
      "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
      "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
      "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
    ].includes(command)
  ) {
    await handleHealthCommand(req);
    return;
  }
  // AI Assistant
  if (["ai", "‡∏ñ‡∏≤‡∏°", "ask", "‡∏Ñ‡∏∏‡∏¢", "chat"].includes(command)) {
    await handleAiCommand(req, conditions);
    return;
  }
  // Chart
  if (["chart", "‡∏Å‡∏£‡∏≤‡∏ü", "c"].includes(command)) {
    console.log("üöÄ Chart command detected, command:", command);
    try {
      // Check if request structure is valid
      if (!req.body || !req.body.events || !req.body.events[0]) {
        console.error("Invalid request structure for chart command");
        return;
      }

      const userId = req.body.events[0].source.userId;
      const originalText = req.body.events[0].message.text;
      console.log(
        "üìä Chart command - userId:",
        userId,
        "originalText:",
        originalText,
      );

      const chartParams = parseChartCommand(originalText);
      console.log("üìä Chart params parsed:", chartParams);

      if (chartParams) {
        console.log("üìä Calling handleChartCommand with params:", chartParams);
        await handleChartCommand(req, userId, chartParams);
        console.log("‚úÖ Chart command completed successfully");
      } else {
        console.error("‚ùå Chart params parsing failed");
        await sendMessage(req, [
          {
            type: "text",
            text: `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n‡πÉ‡∏ä‡πâ:\n‚Ä¢ /chart [‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç] [‡∏ï‡∏•‡∏≤‡∏î]\n‚Ä¢ /chart [‡∏ï‡∏•‡∏≤‡∏î] [‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç]\n‚Ä¢ /c [‡∏ï‡∏•‡∏≤‡∏î] [‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç]\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n‚Ä¢ /chart btc\n‚Ä¢ /chart bn btc\n‚Ä¢ /c bn btc`,
          },
        ]);
      }
    } catch (error) {
      console.error("‚ùå Chart command error:", error);
      // Send error message back to user
      try {
        await sendMessage(req, [
          {
            type: "text",
            text: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\nError: ${error instanceof Error ? error.message : "Unknown error"}`,
          },
        ]);
      } catch (sendError) {
        console.error("Failed to send error message:", sendError);
      }
    }
    return;
  }
  // Default
  handleDefaultCommand(req);
};
