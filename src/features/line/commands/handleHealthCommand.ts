/**
 * Handle Health Activity Commands
 * Provides health and fitness tracking via LINE bot
 */
import { healthActivityService } from "@/features/health-activity/services/health-activity.service";
import { ActivityFormatter } from "@/features/health-activity/helpers/activity-formatter";
import { db } from "@/lib/database/db";

const { sendMessage } = await import("@/lib/utils/line-utils");

export async function handleHealthCommand(req: any): Promise<void> {
  const userId = req.body.events[0].source.userId;
  const text = req.body.events[0].message.text.toLowerCase().trim();

  // Get user account
  const userAccount = await db.account.findFirst({
    where: { providerAccountId: userId },
  });

  if (!userAccount?.userId) {
    await sendMessage(req, [
      {
        type: "text",
        text: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
      },
    ]);
    return;
  }

  const dbUserId = userAccount.userId;
  try {
    // ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ / today / health today
    if (
      text === "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ||
      text === "health today" ||
      text === "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    ) {
      await handleTodaySummary(req, dbUserId);
      return;
    }

    // ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ / this week / health week
    if (
      text === "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ" ||
      text === "health week" ||
      text === "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    ) {
      await handleWeeklySummary(req, dbUserId);
      return;
    }

    // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ / this month / health month
    if (
      text === "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ" ||
      text === "health month" ||
      text === "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
    ) {
      await handleMonthlySummary(req, dbUserId);
      return;
    }

    // ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° / activities / health list
    if (
      text === "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" ||
      text === "health activities" ||
      text === "health list"
    ) {
      await handleActivitiesList(req, dbUserId);
      return;
    }

    // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û / health menu / health help
    if (
      text === "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" ||
      text === "health" ||
      text === "health menu" ||
      text === "health help"
    ) {
      await handleHealthMenu(req);
      return;
    }

    // Default: show menu
    await handleHealthMenu(req);
  } catch (error) {
    console.error("Error handling health command:", error);
    await sendMessage(req, [
      {
        type: "text",
        text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      },
    ]);
  }
}

async function handleTodaySummary(req: any, userId: string): Promise<void> {
  const summary = await healthActivityService.getTodayActivity(userId);
  const message = ActivityFormatter.formatSummary(summary);

  await sendMessage(req, [
    {
      type: "text",
      text: message || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    },
  ]);
}

async function handleWeeklySummary(req: any, userId: string): Promise<void> {
  const summary = await healthActivityService.getWeeklyActivity(userId);
  const message = ActivityFormatter.formatSummary(summary);

  await sendMessage(req, [
    {
      type: "text",
      text: message || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
    },
  ]);
}

async function handleMonthlySummary(req: any, userId: string): Promise<void> {
  const summary = await healthActivityService.getMonthlyActivity(userId);
  const message = ActivityFormatter.formatSummary(summary);

  await sendMessage(req, [
    {
      type: "text",
      text: message || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
    },
  ]);
}

async function handleActivitiesList(req: any, userId: string): Promise<void> {
  const activities = await healthActivityService.getActivities({
    userId,
    limit: 10,
  });

  const message = ActivityFormatter.formatActivitiesList(activities);

  await sendMessage(req, [
    {
      type: "text",
      text: message,
    },
  ]);
}

async function handleHealthMenu(req: any): Promise<void> {
  await sendMessage(req, [
    {
      type: "text",
      text:
        "üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n\n" +
        "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:\n" +
        "‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n" +
        "‚Ä¢ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ - ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ\n" +
        "‚Ä¢ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ - ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ\n\n" +
        "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:\n" +
        "‚Ä¢ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n\n" +
        "üí° ‡∏ó‡∏¥‡∏õ: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡πà‡∏≤‡∏ô API ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
    },
  ]);
}
