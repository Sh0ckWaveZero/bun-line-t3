import { sendMessage } from "../../../lib/utils/line-utils";
import { replyNotFound } from "@/lib/utils/line-message-utils";
import { db as prisma } from "@/lib/database/db";

export const handleSettingsCommand = async (req: any, conditions: any[]) => {
  try {
    const userId = req.body.events[0].source.userId;
    const originalText = req.body.events[0].message.text;
    const command = originalText.split(" ")[0]?.slice(1).toLowerCase();
    
    // Find user by LINE userId
    const account = await prisma.account.findFirst({
      where: {
        providerAccountId: userId,
        provider: "line",
      },
      include: {
        user: {
          include: {
            settings: true,
          },
        },
      },
    });

    if (!account || !account.user) {
      // Detect language from command
      const isEnglish = ["settings", "setting", "config", "preferences", "pref"].includes(command);
      
      const notRegisteredMessage = {
        type: "text",
        text: isEnglish 
          ? "üîê Please register first to access settings\n\nClick 'Register' in the Rich Menu"
          : "üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤\n\n‡∏Ñ‡∏•‡∏¥‡∏Å '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π Rich Menu",
      };
      await sendMessage(req, [notRegisteredMessage]);
      return;
    }

    const user = account.user;
    const action = conditions[0]?.toLowerCase();

    if (["‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "morning", "entry", "signin", "login-reminder"].includes(action)) {
      // Toggle check-in reminders
      const currentSetting = user.settings?.enableCheckInReminders ?? true;
      const newSetting = !currentSetting;

      // Detect language based on action
      const isEnglish = ["morning", "entry", "signin", "login-reminder"].includes(action);

      if (!user.settings) {
        // Create new settings
        await prisma.userSettings.create({
          data: {
            userId: user.id,
            enableCheckInReminders: newSetting,
            enableCheckOutReminders: true,
            enableHolidayNotifications: false,
            timezone: "Asia/Bangkok",
            language: isEnglish ? "en" : "th",
          },
        });
      } else {
        // Update existing settings
        await prisma.userSettings.update({
          where: { userId: user.id },
          data: { enableCheckInReminders: newSetting },
        });
      }

      const statusText = isEnglish 
        ? (newSetting ? "Enabled" : "Disabled")
        : (newSetting ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");
      const emoji = newSetting ? "üîî" : "üîï";
      
      const successMessage = {
        type: "text",
        text: isEnglish 
          ? `${emoji} ${statusText} 8:00 AM check-in reminders successfully!\n\n${newSetting ? "You will receive daily check-in reminders every morning." : "You will no longer receive check-in reminders."}`
          : `${emoji} ${statusText}‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô 8:00 ‡∏ô. ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n${newSetting ? "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤" : "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ"}`,
      };

      await sendMessage(req, [successMessage]);
      return;
    }

    if (["‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô", "finish", "end", "exit", "signout", "logout-reminder"].includes(action)) {
      // Toggle check-out reminders
      const currentSetting = user.settings?.enableCheckOutReminders ?? true;
      const newSetting = !currentSetting;

      // Detect language based on action
      const isEnglish = ["finish", "end", "exit", "signout", "logout-reminder"].includes(action);

      if (!user.settings) {
        // Create new settings
        await prisma.userSettings.create({
          data: {
            userId: user.id,
            enableCheckInReminders: true,
            enableCheckOutReminders: newSetting,
            enableHolidayNotifications: false,
            timezone: "Asia/Bangkok",
            language: isEnglish ? "en" : "th",
          },
        });
      } else {
        // Update existing settings
        await prisma.userSettings.update({
          where: { userId: user.id },
          data: { enableCheckOutReminders: newSetting },
        });
      }

      const statusText = isEnglish 
        ? (newSetting ? "Enabled" : "Disabled")
        : (newSetting ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");
      const emoji = newSetting ? "üîî" : "üîï";
      
      const successMessage = {
        type: "text",
        text: isEnglish 
          ? `${emoji} ${statusText} checkout reminders successfully!\n\n${newSetting ? "You will receive reminders 10 minutes before completing 9 hours and when you reach 9 hours." : "You will no longer receive checkout reminders."}`
          : `${emoji} ${statusText}‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n${newSetting ? "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß" : "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ"}`,
      };

      await sendMessage(req, [successMessage]);
      return;
    }

    if (["‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î", "holiday", "holidays", "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "holiday-notifications"].includes(action)) {
      // Toggle holiday notifications
      const currentSetting = user.settings?.enableHolidayNotifications ?? false;
      const newSetting = !currentSetting;

      // Detect language based on action
      const isEnglish = ["holiday", "holidays", "holiday-notifications"].includes(action);

      if (!user.settings) {
        // Create new settings
        await prisma.userSettings.create({
          data: {
            userId: user.id,
            enableCheckInReminders: true,
            enableCheckOutReminders: true,
            enableHolidayNotifications: newSetting,
            timezone: "Asia/Bangkok",
            language: isEnglish ? "en" : "th",
          },
        });
      } else {
        // Update existing settings
        await prisma.userSettings.update({
          where: { userId: user.id },
          data: { enableHolidayNotifications: newSetting },
        });
      }

      const statusText = isEnglish 
        ? (newSetting ? "Enabled" : "Disabled")
        : (newSetting ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");
      const emoji = newSetting ? "üîî" : "üîï";
      
      const successMessage = {
        type: "text",
        text: isEnglish 
          ? `${emoji} ${statusText} holiday notifications successfully!\n\n${newSetting ? "You will receive notifications about public holidays." : "You will no longer receive holiday notifications."}`
          : `${emoji} ${statusText}‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n${newSetting ? "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£" : "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ"}`,
      };

      await sendMessage(req, [successMessage]);
      return;
    }

    // Show current settings
    const currentSettings = user.settings;
    const checkInStatus = currentSettings?.enableCheckInReminders ?? true;
    const checkOutStatus = currentSettings?.enableCheckOutReminders ?? true;
    const holidayStatus = currentSettings?.enableHolidayNotifications ?? false;
    
    // Detect language from user's previous language setting or command
    const isEnglish = currentSettings?.language === "en" || 
                     ["settings", "setting", "config", "preferences", "pref"].includes(command);
    
    const checkInEmoji = checkInStatus ? "üîî" : "üîï";
    const checkInText = isEnglish 
      ? (checkInStatus ? "ON" : "OFF")
      : (checkInStatus ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");
    const checkOutEmoji = checkOutStatus ? "üîî" : "üîï";
    const checkOutText = isEnglish 
      ? (checkOutStatus ? "ON" : "OFF")
      : (checkOutStatus ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");
    const holidayEmoji = holidayStatus ? "üîî" : "üîï";
    const holidayText = isEnglish 
      ? (holidayStatus ? "ON" : "OFF")
      : (holidayStatus ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î");

    const settingsMessage = {
      type: "template",
      altText: isEnglish ? "Your Settings" : "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      template: {
        type: "buttons",
        text: isEnglish 
          ? `‚öôÔ∏è Notification Settings\n\n${checkInEmoji} Check-in (8:00 AM): ${checkInText}\n${checkOutEmoji} Check-out (Before 9 hrs): ${checkOutText}\n${holidayEmoji} Holiday notifications: ${holidayText}\n\nSelect setting to adjust:`
          : `‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n\n${checkInEmoji} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô (8:00 ‡∏ô.): ${checkInText}\n${checkOutEmoji} ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö 9 ‡∏ä‡∏°.): ${checkOutText}\n${holidayEmoji} ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: ${holidayText}\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö:`,
        actions: [
          {
            type: "message",
            label: isEnglish 
              ? `${checkInStatus ? "Disable" : "Enable"} Check-in`
              : `${checkInStatus ? "‡∏õ‡∏¥‡∏î" : "‡πÄ‡∏õ‡∏¥‡∏î"}‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô`,
            text: isEnglish ? "/settings morning" : "/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
          },
          {
            type: "message",
            label: isEnglish 
              ? `${checkOutStatus ? "Disable" : "Enable"} Check-out`
              : `${checkOutStatus ? "‡∏õ‡∏¥‡∏î" : "‡πÄ‡∏õ‡∏¥‡∏î"}‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô`,
            text: isEnglish ? "/settings finish" : "/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô",
          },
          {
            type: "message",
            label: isEnglish 
              ? `${holidayStatus ? "Disable" : "Enable"} Holiday`
              : `${holidayStatus ? "‡∏õ‡∏¥‡∏î" : "‡πÄ‡∏õ‡∏¥‡∏î"}‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î`,
            text: isEnglish ? "/settings holiday" : "/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î",
          },
        ],
      },
    };

    await sendMessage(req, [settingsMessage]);
  } catch (error) {
    console.error("Error handling settings command:", error);
    replyNotFound(req);
  }
};