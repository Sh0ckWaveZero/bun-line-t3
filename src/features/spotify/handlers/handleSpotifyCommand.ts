/**
 * Spotify Command Handler
 *
 * Handles Spotify-related commands via /ai spotify [mood/query]
 */

import type { LineMessage } from "@/lib/types/line-messaging";
import { spotifyService } from "../services/spotifyService";
import {
  createSpotifyRecommendationsCarousel,
  createMoodSelectionMessage,
  createSpotifyErrorMessage,
} from "../templates/spotifyFlexTemplate";

const { sendMessage } = await import("@/lib/utils/line-utils");

// ============================================================================
// Types
// ============================================================================

type MoodType = "happy" | "sad" | "energetic" | "chill" | "party" | "focus";

const VALID_MOODS: MoodType[] = [
  "happy",
  "sad",
  "energetic",
  "chill",
  "party",
  "focus",
];

// ============================================================================
// Helper Functions
// ============================================================================

/**
 * Check if text is a valid mood
 */
function isValidMood(text: string): text is MoodType {
  return VALID_MOODS.includes(text.toLowerCase() as MoodType);
}

/**
 * Parse Spotify command
 * Examples:
 * - /ai spotify -> show mood selection
 * - /ai spotify happy -> get happy songs
 * - /ai spotify recommend pop -> search for pop recommendations
 */
function parseSpotifyCommand(text: string): {
  action: "mood-select" | "mood-recommend" | "search";
  mood?: MoodType;
  query?: string;
} {
  const parts = text.trim().toLowerCase().split(/\s+/);

  // Remove '/ai' and 'spotify' (or '‡πÄ‡∏û‡∏•‡∏á', 'music') from parts
  const relevantParts = parts.filter(
    (p) => p !== "/ai" && p !== "spotify" && p !== "‡πÄ‡∏û‡∏•‡∏á" && p !== "music",
  );

  // No additional params -> show mood selection
  if (relevantParts.length === 0) {
    return { action: "mood-select" };
  }

  // First param is a valid mood
  if (isValidMood(relevantParts[0]!)) {
    return {
      action: "mood-recommend",
      mood: relevantParts[0] as MoodType,
    };
  }

  // Otherwise, treat as search query
  return {
    action: "search",
    query: relevantParts.join(" "),
  };
}

// ============================================================================
// Main Handler
// ============================================================================

export async function handleSpotifyCommand(
  req: any,
  text: string,
): Promise<void> {
  try {
    const command = parseSpotifyCommand(text);

    let messages: LineMessage[];

    switch (command.action) {
      case "mood-select":
        // Show mood selection menu
        messages = [createMoodSelectionMessage()];
        break;

      case "mood-recommend":
        // Get recommendations by mood
        if (!command.mood) {
          messages = [createSpotifyErrorMessage("Invalid mood specified")];
          break;
        }

        const moodTracks = await spotifyService.getRecommendationsByMood(
          command.mood,
          10,
        );

        if (moodTracks.length === 0) {
          messages = [
            createSpotifyErrorMessage("No recommendations found for this mood"),
          ];
          break;
        }

        const moodEmoji = {
          happy: "üòä",
          sad: "üò¢",
          energetic: "‚ö°",
          chill: "üòå",
          party: "üéâ",
          focus: "üéØ",
        }[command.mood];

        messages = [
          createSpotifyRecommendationsCarousel(
            moodTracks,
            `${moodEmoji} ${command.mood.charAt(0).toUpperCase() + command.mood.slice(1)} Music`,
          ),
        ];
        break;

      case "search":
        // Search and get recommendations
        if (!command.query) {
          messages = [
            createSpotifyErrorMessage("Please provide a search query"),
          ];
          break;
        }

        // First, search for the query to get seed tracks/artists
        const searchResults = await spotifyService.search(
          command.query,
          "track",
          1,
        );

        if (!searchResults.tracks?.items?.length) {
          messages = [
            createSpotifyErrorMessage(
              `No results found for "${command.query}"`,
            ),
          ];
          break;
        }

        // Use the first result as seed for recommendations
        const seedTrack = searchResults.tracks.items[0];
        const recommendations = await spotifyService.getRecommendations({
          seedTracks: [seedTrack.id],
          limit: 10,
        });

        if (recommendations.length === 0) {
          messages = [createSpotifyErrorMessage("No recommendations found")];
          break;
        }

        messages = [
          createSpotifyRecommendationsCarousel(
            recommendations,
            `üéµ Similar to "${seedTrack.name}"`,
          ),
        ];
        break;

      default:
        messages = [createSpotifyErrorMessage("Invalid command")];
    }

    // Send reply using LINE utils
    await sendMessage(req, messages);
  } catch (error) {
    console.error("Spotify command error:", error);

    // Send user-friendly error message
    let errorMsg = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î";

    if (error instanceof Error) {
      switch (error.message) {
        case "SPOTIFY_NOT_CONFIGURED":
          errorMsg =
            "üéµ Spotify ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤\n\n" +
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠:\n" +
            "1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Spotify App ‡∏ó‡∏µ‡πà developer.spotify.com\n" +
            "2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SPOTIFY_CLIENT_ID ‡πÅ‡∏•‡∏∞ SPOTIFY_CLIENT_SECRET\n" +
            "3. Restart server\n\n" +
            "üìñ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n" +
            "src/features/spotify/README.md";
          break;

        case "SPOTIFY_CONNECTION_ERROR":
          errorMsg =
            "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Spotify ‡πÑ‡∏î‡πâ\n\n" +
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n" +
            "‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πâ‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢";
          break;

        case "SPOTIFY_RECOMMENDATIONS_ERROR":
          errorMsg =
            "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ\n\n" +
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Spotify API\n" +
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
          break;

        case "SPOTIFY_SEARCH_ERROR":
          errorMsg =
            "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ\n\n" +
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Spotify API\n" +
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
          break;

        case "SPOTIFY_INVALID_REQUEST":
          errorMsg =
            "‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n" +
            "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
            "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö";
          break;

        case "SPOTIFY_FORBIDDEN":
          errorMsg =
            "üö´ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò\n\n" +
            "Spotify API key ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå\n" +
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö";
          break;

        case "SPOTIFY_RATE_LIMITED":
          errorMsg = "‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n\n" + "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
          break;

        default:
          if (error.message.startsWith("SPOTIFY_AUTH_FAILED")) {
            errorMsg =
              "üîê ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô Spotify ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\n\n" +
              "Client ID ‡∏´‡∏£‡∏∑‡∏≠ Secret ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
              "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö";
          } else if (
            error.message.startsWith("SPOTIFY_RECOMMENDATIONS_FAILED")
          ) {
            errorMsg =
              "‚ö†Ô∏è Spotify API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö error\n\n" +
              "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n" +
              "‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mood/‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
          } else if (error.message.startsWith("SPOTIFY_SEARCH_FAILED")) {
            errorMsg = "üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå\n\n" + "‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö";
          } else {
            errorMsg = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
          }
      }
    }

    await sendMessage(req, [createSpotifyErrorMessage(errorMsg)]);
  }
}

// ============================================================================
// Export
// ============================================================================

export const spotifyHandler = {
  handle: handleSpotifyCommand,
  commands: ["/ai spotify", "/ai ‡πÄ‡∏û‡∏•‡∏á", "/ai music"],
  description: "Get music recommendations from Spotify",
  usage: [
    "/ai spotify - Show mood selection",
    "/ai spotify happy - Get happy music",
    "/ai spotify sad - Get sad music",
    "/ai spotify energetic - Get energetic music",
    "/ai spotify chill - Get chill music",
    "/ai spotify party - Get party music",
    "/ai spotify focus - Get focus music",
    "/ai spotify [artist/song] - Search and get recommendations",
    "/ai ‡πÄ‡∏û‡∏•‡∏á [mood/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤] - Thai language support",
  ],
};
