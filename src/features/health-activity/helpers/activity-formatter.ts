/**
 * Activity Formatter Helper
 * Formats activity data for display in LINE messages
 */
import type { ActivityData, ActivitySummary } from "../types";

export class ActivityFormatter {
  /**
   * Format activity summary for LINE message
   */
  static formatSummary(summary: ActivitySummary): string {
    const { period, totalActivities, totalDuration, totalDistance, totalCalories, totalSteps } = summary;

    const periodName = {
      daily: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
      weekly: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
      monthly: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
    }[period];

    let message = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°${periodName}\n\n`;
    message += `üèÉ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${totalActivities} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
    message += `‚è± ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: ${this.formatDuration(totalDuration)}\n`;

    if (totalDistance && totalDistance > 0) {
      message += `üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${totalDistance.toFixed(2)} ‡∏Å‡∏°.\n`;
    }

    if (totalCalories && totalCalories > 0) {
      message += `üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${totalCalories.toFixed(0)} kcal\n`;
    }

    if (totalSteps && totalSteps > 0) {
      message += `üëü ‡∏Å‡πâ‡∏≤‡∏ß: ${totalSteps.toLocaleString()} ‡∏Å‡πâ‡∏≤‡∏ß\n`;
    }

    if (summary.averageHeartRate) {
      message += `üíì ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${summary.averageHeartRate} bpm\n`;
    }

    return message;
  }

  /**
   * Format single activity for LINE message
   */
  static formatActivity(activity: ActivityData): string {
    const activityName = this.getActivityName(activity.activityType);
    const date = new Date(activity.date).toLocaleDateString("th-TH", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });

    let message = `üèÉ ${activityName}\n`;
    message += `üìÖ ${date}\n`;
    message += `‚è± ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${this.formatDuration(activity.duration)}\n`;

    if (activity.distance) {
      message += `üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${activity.distance.toFixed(2)} ‡∏Å‡∏°.\n`;
    }

    if (activity.calories) {
      message += `üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${activity.calories.toFixed(0)} kcal\n`;
    }

    if (activity.steps) {
      message += `üëü ‡∏Å‡πâ‡∏≤‡∏ß: ${activity.steps.toLocaleString()} ‡∏Å‡πâ‡∏≤‡∏ß\n`;
    }

    if (activity.heartRate) {
      if (activity.heartRate.average) {
        message += `üíì ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${activity.heartRate.average} bpm\n`;
      }
      if (activity.heartRate.max) {
        message += `üíì ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${activity.heartRate.max} bpm\n`;
      }
    }

    return message;
  }

  /**
   * Format duration in minutes to readable format
   */
  static formatDuration(minutes: number): string {
    const hours = Math.floor(minutes / 60);
    const mins = Math.round(minutes % 60);

    if (hours > 0) {
      return `${hours} ‡∏ä‡∏°. ${mins} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    }
    return `${mins} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  }

  /**
   * Get Thai activity name
   */
  static getActivityName(activityType: string): string {
    const names: Record<string, string> = {
      walking: "‡πÄ‡∏î‡∏¥‡∏ô",
      running: "‡∏ß‡∏¥‡πà‡∏á",
      cycling: "‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô",
      swimming: "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥",
      workout: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢",
      yoga: "‡πÇ‡∏¢‡∏Ñ‡∏∞",
      other: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    };

    return names[activityType] || activityType;
  }

  /**
   * Format activities list for LINE flex message
   */
  static formatActivitiesList(activities: ActivityData[]): string {
    if (activities.length === 0) {
      return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ";
    }

    let message = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n\n";

    activities.forEach((activity, index) => {
      const activityName = this.getActivityName(activity.activityType);
      const date = new Date(activity.date).toLocaleDateString("th-TH", {
        month: "short",
        day: "numeric",
      });

      message += `${index + 1}. ${activityName} - ${date}\n`;
      message += `   ‚è± ${this.formatDuration(activity.duration)}`;

      if (activity.distance) {
        message += ` | üìè ${activity.distance.toFixed(1)} ‡∏Å‡∏°.`;
      }

      if (activity.calories) {
        message += ` | üî• ${activity.calories.toFixed(0)} kcal`;
      }

      message += "\n\n";
    });

    return message;
  }
}
