// Attendance validation helpers
import { WORKPLACE_POLICIES } from "~/features/attendance/constants/workplace-policies";
import { holidayService } from "~/features/attendance/services/holidays";

export const isWorkingDay = async (date: Date): Promise<boolean> => {
  // Check if it's a weekend (Saturday = 6, Sunday = 0)
  // Date object already converted to Bangkok time, use UTC method to avoid double conversion
  const dayOfWeek = date.getUTCDay();
  if (!(WORKPLACE_POLICIES.WORKING_DAYS as readonly number[]).includes(dayOfWeek)) {
    return false;
  }
  
  // Check if it's a public holiday using database
  const isHoliday = await holidayService.isPublicHoliday(date);
  if (isHoliday) {
    return false;
  }
  
  return true;
};

export const isPublicHoliday = async (date: Date): Promise<boolean> => {
  return await holidayService.isPublicHoliday(date);
};

export const isValidCheckInTime = (date: Date): { valid: boolean; message?: string; isEarlyCheckIn?: boolean; isLateCheckIn?: boolean } => {
  // Date object already converted to Bangkok time, use UTC methods to avoid double conversion
  const hour = date.getUTCHours();
  const minute = date.getUTCMinutes();
  const timeInMinutes = hour * 60 + minute;
  
  const earliestTime = WORKPLACE_POLICIES.EARLIEST_CHECK_IN.hour * 60 + WORKPLACE_POLICIES.EARLIEST_CHECK_IN.minute;
  const latestTime = WORKPLACE_POLICIES.LATEST_CHECK_IN.hour * 60 + WORKPLACE_POLICIES.LATEST_CHECK_IN.minute;
  
  // Allow check-in from 00:01 to before earliest time (08:00) as early check-in
  if ((hour === 0 && minute >= 1) || (hour > 0 && hour < WORKPLACE_POLICIES.EARLIEST_CHECK_IN.hour)) {
    return {
      valid: true,
      isEarlyCheckIn: true,
      message: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ 00:01-07:59 ‡∏ô. (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô 17:00 ‡∏ô.)`
    };
  }
  
  // Allow early check-in (exactly at 8:00 but before normal start time window)
  if (timeInMinutes < earliestTime) {
    return {
      valid: true,
      isEarlyCheckIn: true,
      message: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô 17:00 ‡∏ô.)`
    };
  }
  
  if (timeInMinutes > latestTime) {
    return {
      valid: true,
      message: `‡πÇ‡∏≠‡πâ‡πÇ‡∏´‡πà‡∏ß‡∏ß‡∏ß! ‡∏™‡∏≤‡∏¢‡∏¢‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏°‡πà‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Å‡∏Å! üò± ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏à‡πâ‡∏≤‡∏≤‡∏≤‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏¢‡∏¢! üéâ ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏ä‡∏±‡∏¢‡πÑ‡∏õ‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ô‡∏∞‡∏à‡πä‡∏∞‡∏Ñ‡∏ô‡∏î‡∏µ! ü•∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡πÑ‡∏õ! üíì ‡∏™‡∏≤‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ! ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏µ‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ô‡∏ô‡∏ô! üòÇ ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏ì‡∏ì‡∏ì! üöÄ‚ú®`,
      isLateCheckIn: true
    };
  }
  
  return { valid: true };
};
