import { db } from "~/lib/database/db";
import { holidayService } from "./holidays";
import { selectRandomElement } from "~/lib/crypto-random";
import { 
  roundToTwoDecimals, 
  roundToOneDecimal, 
  calculatePercentage,
  calculateAverage
} from "~/lib/utils/number";

// Company workplace policies (based on Thai requirements)
const WORKPLACE_POLICIES = {
  // Working days: Monday to Friday (1-5, where Sunday = 0)
  WORKING_DAYS: [1, 2, 3, 4, 5] as const,
  
  // Flexible working hours: 08:00 - 11:00 start time
  // NOTE: Early check-in allowed from 00:01-07:59, recording actual time but setting checkout to 17:00
  EARLIEST_CHECK_IN: { hour: 8, minute: 0 },
  LATEST_CHECK_IN: { hour: 11, minute: 0 },
  
  // Total working hours including lunch break
  TOTAL_HOURS_PER_DAY: 9,
  ACTUAL_WORKING_HOURS: 8, // Excluding 1-hour lunch break
  LUNCH_BREAK_HOURS: 1,
  
  // Time zone
  TIMEZONE: 'Asia/Bangkok'
};

interface CheckInResult {
  success: boolean;
  message: string;
  checkInTime?: Date;
  expectedCheckOutTime?: Date;
  alreadyCheckedIn?: boolean;
  isEarlyCheckIn?: boolean;
  actualCheckInTime?: Date;
}

interface MonthlyAttendanceReport {
  userId: string;
  month: string; // YYYY-MM format
  totalDaysWorked: number;
  totalHoursWorked: number;
  attendanceRecords: AttendanceRecord[];
  workingDaysInMonth: number;
  attendanceRate: number; // percentage
  complianceRate: number; // percentage of days with full 9-hour work
  averageHoursPerDay: number;
  completeDays: number; // number of days with complete 9-hour work
}

interface AttendanceRecord {
  id: string;
  workDate: string;
  checkInTime: Date;
  checkOutTime: Date | null;
  status: string;
  hoursWorked: number | null;
}

const formatThaiTime = (date: Date): string => {
  return date.toLocaleString('th-TH', {
    timeZone: 'Asia/Bangkok',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
};

const formatThaiTimeOnly = (date: Date): string => {
  return date.toLocaleString('th-TH', {
    timeZone: 'Asia/Bangkok',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// Policy validation functions
const isWorkingDay = async (date: Date): Promise<boolean> => {
  // Check if it's a weekend (Saturday = 6, Sunday = 0)
  const dayOfWeek = date.getDay();
  if (!(WORKPLACE_POLICIES.WORKING_DAYS as readonly number[]).includes(dayOfWeek)) {
    return false;
  }
  
  // Check if it's a public holiday using database
  const isHoliday = await holidayService.isPublicHoliday(date);
  if (isHoliday) {
    return false;
  }
  
  return true;
};

const isPublicHoliday = async (date: Date): Promise<boolean> => {
  return await holidayService.isPublicHoliday(date);
};

const isValidCheckInTime = (date: Date): { valid: boolean; message?: string; isEarlyCheckIn?: boolean } => {
  const hour = date.getHours();
  const minute = date.getMinutes();
  const timeInMinutes = hour * 60 + minute;
  
  const earliestTime = WORKPLACE_POLICIES.EARLIEST_CHECK_IN.hour * 60 + WORKPLACE_POLICIES.EARLIEST_CHECK_IN.minute;
  const latestTime = WORKPLACE_POLICIES.LATEST_CHECK_IN.hour * 60 + WORKPLACE_POLICIES.LATEST_CHECK_IN.minute;
  
  // Allow check-in from 00:01 to before earliest time (08:00) as early check-in
  if ((hour === 0 && minute >= 1) || (hour > 0 && hour < WORKPLACE_POLICIES.EARLIEST_CHECK_IN.hour)) {
    return {
      valid: true,
      isEarlyCheckIn: true,
      message: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ 00:01-07:59 ‡∏ô. (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô 17:00 ‡∏ô.)`
    };
  }
  
  // Allow early check-in (exactly at 8:00 but before normal start time window)
  if (timeInMinutes < earliestTime) {
    return {
      valid: true,
      isEarlyCheckIn: true,
      message: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô 17:00 ‡∏ô.)`
    };
  }
  
  if (timeInMinutes > latestTime) {
    const lateMessages = [
      `‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô ${WORKPLACE_POLICIES.LATEST_CHECK_IN.hour}:${WORKPLACE_POLICIES.LATEST_CHECK_IN.minute.toString().padStart(2, '0')} ‡∏ô.`,
      `‡∏≠‡∏∏‡πä‡∏¢ ‡∏™‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß! üôà ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞`,
      `‡∏´‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏∑‡∏≠? üò¥ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (‡∏Å‡πà‡∏≠‡∏ô 11:00 ‡∏ô.)`,
      `‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤`,
      `‡πÅ‡∏õ‡∏∞! ‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß üèÉ‚Äç‚ôÇÔ∏èüí® ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ô‡∏∞`,
      `‡πÄ‡∏Æ‡πâ‡∏≠... ‡∏™‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß üòÖ ‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ`,
      `‡∏°‡∏≠‡∏á‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏ã‡∏¥ ‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üïê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô 11:00 ‡∏ô. ‡∏ô‡∏∞`
    ] as const;
    const randomMessage = selectRandomElement(lateMessages);
    return {
      valid: false,
      message: randomMessage
    };
  }
  
  return { valid: true };
};

const calculateExpectedCheckOutTime = (checkInTime: Date): Date => {
  return new Date(checkInTime.getTime() + WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY * 60 * 60 * 1000);
};

const getWorkingHoursInfo = (checkInTime: Date, checkOutTime?: Date) => {
  const expectedCheckOut = calculateExpectedCheckOutTime(checkInTime);
  
  if (!checkOutTime) {
    return {
      expectedCheckOutTime: expectedCheckOut,
      isCompleteWorkDay: false,
      actualHours: 0,
      status: 'in_progress' as const
    };
  }
  
  const actualWorkingMs = checkOutTime.getTime() - checkInTime.getTime();
  const actualHours = actualWorkingMs / (1000 * 60 * 60);
  const isCompleteWorkDay = actualHours >= WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY;
  
  return {
    expectedCheckOutTime: expectedCheckOut,
    actualCheckOutTime: checkOutTime,
    isCompleteWorkDay,
    actualHours: roundToTwoDecimals(actualHours), // üöÄ ‡πÉ‡∏ä‡πâ utility function
    status: isCompleteWorkDay ? 'complete' as const : 'incomplete' as const
  };
};

const getTodayDateString = (): string => {
  const today = new Date();
  // Convert to Bangkok timezone and format as YYYY-MM-DD
  const bangkokDate = new Intl.DateTimeFormat('en-CA', {
    timeZone: 'Asia/Bangkok',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).format(today);
  return bangkokDate; // Already in YYYY-MM-DD format
};

const getCurrentBangkokTime = (): Date => {
  const now = new Date();
  // Get current time in Bangkok timezone
  const bangkokTimeString = now.toLocaleString('en-US', {
    timeZone: 'Asia/Bangkok',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
  
  // Parse the Bangkok time string back to a Date object
  const bangkokTime = new Date(bangkokTimeString);
  return bangkokTime;
};

const checkIn = async (userId: string): Promise<CheckInResult> => {
  try {
    const todayDate = getTodayDateString();
    const actualCheckInTime = getCurrentBangkokTime();
    
    // Debug current time
    console.log('=== Check-in Debug ===');
    console.log('User ID:', userId);
    console.log('Today Date:', todayDate);
    console.log('Actual Check-in Time:', formatThaiTime(actualCheckInTime));
    console.log('Hour:', actualCheckInTime.getHours(), 'Minute:', actualCheckInTime.getMinutes());
    
    // Policy validation: Check if today is a working day
    const isWorking = await isWorkingDay(actualCheckInTime);
    console.log('Is Working Day:', isWorking);
    
    if (!isWorking) {
      const dayName = actualCheckInTime.toLocaleDateString('th-TH', { 
        weekday: 'long',
        timeZone: 'Asia/Bangkok'
      });
      
      // Check if it's a public holiday
      const isHoliday = await isPublicHoliday(actualCheckInTime);
      if (isHoliday) {
        const holidayMessages = [
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö üéâ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`,
          `‡πÄ‡∏Æ‡πâ‡∏¢! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ô‡∏∞ ‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏•‡∏¢ üèñÔ∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô`,
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤‡∏ß‡πÜ ‡∏ô‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ üò¥üçú`,
          `‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô? ‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏Ñ‡∏∞ üòÖ ‡πÑ‡∏õ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ`,
          `‡∏≠‡∏¥‡∏≠‡∏¥ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶‚ú®`,
          `‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡πÑ‡∏ß‡πâ ‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÜ üéÆüé®`,
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏∞ ‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏°‡∏±‡πâ‡∏¢? üèÉ‚Äç‚ôÇÔ∏èüí™`
        ] as const;
        const randomMessage = selectRandomElement(holidayMessages);
        return {
          success: false,
          message: randomMessage
        };
      }
      
      // If not a public holiday, it must be a weekend
      const weekendMessages = [
        `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ${dayName}‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üò¥ ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`,
        `‡πÄ‡∏≠‡πà‡∏≠... ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ${dayName}‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ü§î ‡πÑ‡∏õ‡∏ô‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß!`,
        `${dayName}‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô? ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ üí™ ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡∏û‡∏±‡∏Å‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤`,
        `‡∏õ‡∏Å‡∏ï‡∏¥${dayName}‡∏ô‡∏µ‡πà‡∏ô‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡∏ô‡∏∞ üòÜ ‡πÑ‡∏õ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏°‡∏≤‡πÄ‡∏ñ‡∏≠‡∏∞`,
        `${dayName}‡∏´‡∏¢‡∏∏‡∏î‡∏à‡πâ‡∏≤ ‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á üçΩÔ∏èüé¨`,
        `‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î${dayName} ‡πÑ‡∏õ‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏°‡∏±‡πâ‡∏¢? üõçÔ∏è‚ú®`,
        `${dayName}‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÜ ‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏™‡∏õ‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ üßò‚Äç‚ôÄÔ∏èüíÜ‚Äç‚ôÇÔ∏è`
      ] as const;
      const randomMessage = selectRandomElement(weekendMessages);
      return {
        success: false,
        message: randomMessage
      };
    }
    
    // Policy validation: Check if check-in time is within allowed hours
    const timeValidation = isValidCheckInTime(actualCheckInTime);
    console.log('Time Validation:', timeValidation);
    
    if (!timeValidation.valid) {
      return {
        success: false,
        message: timeValidation.message || '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      };
    }
    
    // For early check-in, record actual time but calculate expected checkout differently
    let recordedCheckInTime = actualCheckInTime;
    let calculatedExpectedCheckOutTime: Date;
    
    if (timeValidation.isEarlyCheckIn) {
      // Record actual check-in time
      recordedCheckInTime = actualCheckInTime;
      
      // For early check-in (before 08:00), set checkout time to 17:00
      const year = actualCheckInTime.getFullYear();
      const month = actualCheckInTime.getMonth();
      const date = actualCheckInTime.getDate();
      calculatedExpectedCheckOutTime = new Date(year, month, date, 17, 0, 0, 0);
    } else {
      // Normal check-in: calculate expected checkout from actual check-in time
      calculatedExpectedCheckOutTime = calculateExpectedCheckOutTime(recordedCheckInTime);
    }
    
    // Check if user already checked in today
    const existingAttendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate
        }
      }
    });

    if (existingAttendance) {
      // If already checked out, allow check in again by updating the record
      if (existingAttendance.status === "checked_out") {
        // Update existing record with new check-in time
        await db.workAttendance.update({
          where: { id: existingAttendance.id },
          data: {
            checkInTime: recordedCheckInTime,
            checkOutTime: null, // Reset check-out time
            status: "checked_in"
          }
        });
        
        const afternoonMessages = [
          "‡∏¢‡∏¥‡πâ‡∏°‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á) üåá",
          "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö! üåá ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
          "‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! üòä ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢",
          "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! ‚òÄÔ∏è",
          "‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß üïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠",
          "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üëå"
        ] as const;
        const randomMessage = selectRandomElement(afternoonMessages);
        
        return {
          success: true,
          message: randomMessage,
          checkInTime: recordedCheckInTime,
          expectedCheckOutTime: calculatedExpectedCheckOutTime
        };
      }
      
      // If still checked in, return already checked in message
      const alreadyCheckedInMessages = [
        "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß",
        "‡πÄ‡∏Æ‡πâ‡∏¢! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ü§î ‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏£‡∏≠?",
        "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! üòÑ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
        "‡∏≠‡∏¥‡∏≠‡∏¥ ‡∏•‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠? ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‚úÖ",
        "‡πÄ‡∏≠‡πä‡∏∞? ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏µ‡πà‡∏ô‡∏≤ üôÉ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠",
        "‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏°‡∏±‡πâ‡∏¢? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß üòÇüç±",
        "‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®‡∏ô‡∏∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤ üó∫Ô∏è"
      ] as const;
      const randomMessage = selectRandomElement(alreadyCheckedInMessages);
      return {
        success: false,
        message: randomMessage,
        alreadyCheckedIn: true,
        checkInTime: existingAttendance.checkInTime,
        expectedCheckOutTime: calculateExpectedCheckOutTime(existingAttendance.checkInTime)
      };
    }

    // Create new attendance record
    await db.workAttendance.create({
      data: {
        userId: userId,
        checkInTime: recordedCheckInTime,
        workDate: todayDate,
        status: "checked_in"
      }
    });

    const checkInTimeStr = formatThaiTimeOnly(recordedCheckInTime);
    const expectedCheckOutStr = formatThaiTimeOnly(calculatedExpectedCheckOutTime);
    
    // Create success messages
    const successMessages = [
      `‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß üåü ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡πÄ‡∏¢‡πà! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß üéâ ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®! ‚≠ê ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏™‡∏π‡πâ‡πÜ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞! üí™ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß ‚ú® ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! üòä ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! üöÄ ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`
    ] as const;
    
    let message = selectRandomElement(successMessages);
    
    if (timeValidation.isEarlyCheckIn) {
      const hour = actualCheckInTime.getHours();
      // üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì string ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const checkInStr = checkInTimeStr;
      const checkOutStr = "17:00 ‡∏ô.";
      
      const earlyMessages = [
        `\n‚è∞ ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüåÖ ‡∏°‡∏≤‡πÄ‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\n‚≠ê ‡∏Ç‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á! ‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüêì ‡πÑ‡∏Å‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏±‡∏ô! ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`
      ] as const;
      
      if (hour < 1) {
        message += `\nüåô ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`;
      } else {
        message += selectRandomElement(earlyMessages);
      }
    }

    return {
      success: true,
      message: message,
      checkInTime: recordedCheckInTime,
      expectedCheckOutTime: calculatedExpectedCheckOutTime,
      isEarlyCheckIn: timeValidation.isEarlyCheckIn,
      actualCheckInTime: timeValidation.isEarlyCheckIn ? actualCheckInTime : undefined
    };

  } catch (error) {
    console.error('Error during check-in:', error);
    const gentleErrorMessages = [
      "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏á‡∏±‡∏ß‡πÄ‡∏á‡∏µ‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üå∏ ‡∏£‡∏≠‡∏ã‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡πÄ‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ü¶ã ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡πà‡∏∞ üò¥üí§ ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞",
      "‡∏≠‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üå∫ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
      "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏á‡πÜ ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üåô‚ú® ‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô üåø ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ üïäÔ∏è ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏≠‡πÅ‡∏õ‡πâ‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞"
    ] as const;
    const randomMessage = selectRandomElement(gentleErrorMessages);
    return {
      success: false,
      message: randomMessage
    };
  }
};

const checkOut = async (userId: string): Promise<CheckInResult> => {
  try {
    const todayDate = getTodayDateString();
    const checkOutTime = getCurrentBangkokTime();
    
    // Find today's attendance record
    const attendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate
        }
      }
    });

    if (!attendance) {
      const gentleNotFoundMessages = [
        "‡∏´‡∏∑‡∏°... ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üå∏ ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
        "‡∏≠‡πà‡∏≤‡∏ß ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ü¶ã ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡πÄ‡∏≠‡πä‡∏∞ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞ üò¥ ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏ô‡∏∞",
        "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üå∫ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
        "‡∏î‡∏π‡∏™‡∏¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üåô ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞ üåø ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üïäÔ∏è ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡πÑ‡∏´‡∏°"
      ] as const;
      const randomMessage = selectRandomElement(gentleNotFoundMessages);
      return {
        success: false,
        message: randomMessage
      };
    }

    if (attendance.status === "checked_out") {
      const workInfo = getWorkingHoursInfo(attendance.checkInTime, attendance.checkOutTime || checkOutTime);
      const workHours = roundToOneDecimal(workInfo.actualHours); // üöÄ ‡πÉ‡∏ä‡πâ utility function
      const alreadyCheckedOutMessages = [
        `‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ üòÑ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!`,
        `‡∏≠‡πà‡∏≤‡∏ß ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üéâ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏•‡∏¢`,
        `‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏≠ üòä ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö ${workHours} ‡∏ä‡∏°. ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞`,
        `‡πÄ‡∏≠‡∏≠ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏´‡∏•‡∏∞ ‚ú® ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏±‡πâ‡∏¢`,
        `‡πÄ‡∏Æ‡πâ ‡∏≠‡πä‡∏≤‡∏Å‡∏Å‡∏Å ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üí™ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏Å‡πà‡∏á‡∏™‡∏∏‡∏î‡πÜ`,
        `‡∏´‡∏∑‡∏°... ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üöÄ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°.`,
        `‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏´‡∏•‡∏∞ üòå ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${workHours} ‡∏ä‡∏°. ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!`
      ] as const;
      const randomMessage = selectRandomElement(alreadyCheckedOutMessages);
      return {
        success: false,
        message: randomMessage,
        checkInTime: attendance.checkInTime,
        expectedCheckOutTime: attendance.checkOutTime || checkOutTime
      };
    }

    // Calculate working hours and validate
    const workInfo = getWorkingHoursInfo(attendance.checkInTime, checkOutTime);
    
    // Update attendance record with check-out time
    await db.workAttendance.update({
      where: {
        id: attendance.id
      },
      data: {
        checkOutTime: checkOutTime,
        status: "checked_out"
      }
    });

    const checkInTimeStr = formatThaiTimeOnly(attendance.checkInTime);
    const checkOutTimeStr = formatThaiTimeOnly(checkOutTime);
    
    const successCheckoutMessages = [
      "‡∏¢‡∏¥‡πâ‡∏°‡πÜ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üéâ",
      "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Å! ‚ú®",
      "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß üí™",
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß üòä",
      "‡πÇ‡∏≠‡πÄ‡∏Ñ! ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üöÄ",
      "‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üòå",
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üåü"
    ] as const;
    const randomSuccessMessage = selectRandomElement(successCheckoutMessages);
    
    // üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const workHours = roundToOneDecimal(workInfo.actualHours);
    let message = `${randomSuccessMessage}\n‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô: ${checkInTimeStr} ‡∏ô.\n‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô: ${checkOutTimeStr} ‡∏ô.\n‡∏£‡∏ß‡∏°: ${workHours} ‡∏ä‡∏°.`;
    
    if (!workInfo.isCompleteWorkDay) {
      const shortHours = WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY - workInfo.actualHours;
      const shortHoursStr = roundToOneDecimal(shortHours); // üöÄ ‡πÉ‡∏ä‡πâ utility function
      const shortWorkMessages = [
        `üí≠ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `ü§î ‡∏≠‡πà‡∏≤‡∏ß ‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `üòä ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏ô‡∏∞ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `üå∏ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`
      ] as const;
      const randomShortMessage = selectRandomElement(shortWorkMessages);
      message += `\n${randomShortMessage}`;
    } else {
      const completeWorkMessages = [
        "‚ú® ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!",
        "üéØ ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
        "üí™ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 8 ‡∏ä‡∏°.",
        "üåü ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢",
        "üéâ ‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏±‡∏á! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤"
      ] as const;
      const randomCompleteMessage = selectRandomElement(completeWorkMessages);
      message += `\n${randomCompleteMessage}`;
    }

    return {
      success: true,
      message: message,
      checkInTime: attendance.checkInTime,
      expectedCheckOutTime: checkOutTime
    };

  } catch (error) {
    console.error('Error during check-out:', error);
    const gentleErrorMessages = [
      "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏á‡∏±‡∏ß‡πÄ‡∏á‡∏µ‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üå∏ ‡∏£‡∏≠‡∏ã‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡πÄ‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ü¶ã ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡πà‡∏∞ üò¥üí§ ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞",
      "‡∏≠‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üå∫ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
      "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏á‡πÜ ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üåô‚ú® ‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô üåø ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ üïäÔ∏è ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏≠‡πÅ‡∏õ‡πâ‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞"
    ] as const;
    const randomMessage = selectRandomElement(gentleErrorMessages);
    return {
      success: false,
      message: randomMessage
    };
  }
};

const getTodayAttendance = async (userId: string) => {
  try {
    const todayDate = getTodayDateString();
    
    const attendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate
        }
      }
    });

    return attendance;
  } catch (error) {
    console.error('Error getting today attendance:', error);
    return null;
  }
};

const getMonthlyAttendanceReport = async (userId: string, month: string): Promise<MonthlyAttendanceReport | null> => {
  try {
    // Parse month (YYYY-MM format)
    const [year, monthNum] = month.split('-');
    if (!year || !monthNum) {
      throw new Error('Invalid month format. Use YYYY-MM');
    }

    // Get first and last day of the month in YYYY-MM-DD format
    const firstDay = `${year}-${monthNum.padStart(2, '0')}-01`;
    const lastDay = new Date(parseInt(year), parseInt(monthNum), 0).getDate();
    const lastDayStr = `${year}-${monthNum.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`;

    // Get attendance records for the month
    const attendanceRecords = await db.workAttendance.findMany({
      where: {
        userId: userId,
        workDate: {
          gte: firstDay,
          lte: lastDayStr,
        }
      },
      orderBy: {
        workDate: 'asc'
      }
    });

    // Calculate total working days in month (excluding weekends and holidays)
    const workingDaysInMonth = await getWorkingDaysInMonth(parseInt(year), parseInt(monthNum) - 1);

    // Process attendance records
    const processedRecords: AttendanceRecord[] = attendanceRecords.map(record => {
      let hoursWorked: number | null = null;
      
      if (record.checkInTime && record.checkOutTime) {
        const timeDiff = record.checkOutTime.getTime() - record.checkInTime.getTime();
        hoursWorked = timeDiff / (1000 * 60 * 60); // Convert to hours
      }

      return {
        id: record.id,
        workDate: record.workDate,
        checkInTime: record.checkInTime,
        checkOutTime: record.checkOutTime,
        status: record.status,
        hoursWorked: hoursWorked
      };
    });

    // Calculate statistics with policy compliance
    const totalDaysWorked = processedRecords.length;
    const totalHoursWorked = processedRecords.reduce((total, record) => {
      return total + (record.hoursWorked || 0);
    }, 0);
    // Calculate metrics
    const attendanceRate = calculatePercentage(totalDaysWorked, workingDaysInMonth);
    
    // Calculate policy compliance metrics
    const completeDays = processedRecords.filter(record => 
      record.hoursWorked && record.hoursWorked >= WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY
    ).length;
    const complianceRate = calculatePercentage(completeDays, totalDaysWorked);
    const averageHoursPerDay = calculateAverage(totalHoursWorked, totalDaysWorked);

    // üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const roundedTotalHours = roundToTwoDecimals(totalHoursWorked);
    const roundedAttendanceRate = roundToTwoDecimals(attendanceRate);
    const roundedComplianceRate = roundToTwoDecimals(complianceRate);
    const roundedAverageHours = roundToTwoDecimals(averageHoursPerDay);

    return {
      userId,
      month,
      totalDaysWorked,
      totalHoursWorked: roundedTotalHours,
      attendanceRecords: processedRecords,
      workingDaysInMonth,
      attendanceRate: roundedAttendanceRate,
      complianceRate: roundedComplianceRate,
      averageHoursPerDay: roundedAverageHours,
      completeDays
    };

  } catch (error) {
    console.error('Error getting monthly attendance report:', error);
    return null;
  }
};

const getWorkingDaysInMonth = async (year: number, month: number): Promise<number> => {
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  let workingDays = 0;

  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month, day);
    
    // Use the isWorkingDay function which checks both weekends and public holidays
    const isWorking = await isWorkingDay(date);
    if (isWorking) {
      workingDays++;
    }
  }

  return workingDays;
};

/**
 * Finds all users who checked in today but haven't checked out yet
 * @returns Array of user IDs who need checkout reminders
 */
const getUsersWithPendingCheckout = async (): Promise<string[]> => {
  try {
    const todayDate = getTodayDateString();
    
    // Get all attendance records for today with status "checked_in"
    const pendingCheckouts = await db.workAttendance.findMany({
      where: {
        workDate: todayDate,
        status: "checked_in",
      },
      select: {
        userId: true
      }
    });
    
    // Extract just the user IDs
    return pendingCheckouts.map(record => record.userId);
  } catch (error) {
    console.error('Error finding users with pending checkouts:', error);
    return [];
  }
};

// Debug function to check current time and validation
const debugTimeValidation = () => {
  const currentTime = getCurrentBangkokTime();
  const timeValidation = isValidCheckInTime(currentTime);
  const todayDate = getTodayDateString();
  
  console.log('=== Debug Time Validation ===');
  console.log('Current Bangkok Time:', formatThaiTime(currentTime));
  console.log('Current Hour:', currentTime.getHours());
  console.log('Current Minute:', currentTime.getMinutes());
  console.log('Today Date String:', todayDate);
  console.log('Time Validation:', timeValidation);
  console.log('Is Early Check-in:', timeValidation.isEarlyCheckIn);
  console.log('============================');
  
  return {
    currentTime,
    timeValidation,
    todayDate,
    formattedTime: formatThaiTime(currentTime)
  };
};

export const attendanceService = {
  checkIn,
  checkOut,
  getTodayAttendance,
  getMonthlyAttendanceReport,
  formatThaiTime,
  formatThaiTimeOnly,
  isWorkingDay,
  isPublicHoliday,
  isValidCheckInTime,
  calculateExpectedCheckOutTime,
  getWorkingHoursInfo,
  getWorkingDaysInMonth,
  getCurrentBangkokTime,
  debugTimeValidation,
  WORKPLACE_POLICIES,
  getUsersWithPendingCheckout
};
