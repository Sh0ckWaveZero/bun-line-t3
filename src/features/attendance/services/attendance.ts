import { db } from "../../../lib/database/db";
import { selectRandomElement } from "../../../lib/crypto-random";
import {
  roundToTwoDecimals,
  roundToOneDecimal,
  calculatePercentage,
  calculateAverage,
} from "../../../lib/utils/number";
import {
  getCurrentUTCTime,
  getCurrentBangkokTime,
  convertUTCToBangkok,
  getTodayDateString,
  formatThaiTime,
  formatThaiTimeOnly,
} from "../../../lib/utils/datetime";
import {
  isWorkingDay,
  isPublicHoliday,
  isValidCheckInTime,
  calculateExpectedCheckOutTime,
  getWorkingHoursInfo,
  getWorkingDaysInMonth,
  getUsersWithPendingCheckout,
  calculateUserReminderTime,
  shouldReceive10MinReminder,
  shouldReceiveFinalReminder,
  getUsersNeedingDynamicReminder,
} from "../helpers";
import { WORKPLACE_POLICIES } from "../constants/workplace-policies";
import type {
  CheckInResult,
  MonthlyAttendanceReport,
  AttendanceRecord,
} from "../types/attendance";
import { AttendanceStatusType } from "@prisma/client";

const checkIn = async (userId: string): Promise<CheckInResult> => {
  try {
    const todayDate = getTodayDateString();
    const utcCheckInTime = getCurrentUTCTime();
    const bangkokCheckInTime = convertUTCToBangkok(utcCheckInTime);

    console.log("=== Check-in Debug ===");
    console.log("User ID:", userId);
    console.log("Today Date:", todayDate);
    console.log("Bangkok Check-in Time:", formatThaiTime(bangkokCheckInTime));
    console.log("UTC Check-in Time:", utcCheckInTime.toISOString());
    console.log(
      "Hour (Bangkok):",
      bangkokCheckInTime.getHours(),
      "Minute:",
      bangkokCheckInTime.getMinutes(),
    );

    const isWorking = await isWorkingDay(bangkokCheckInTime);
    console.log("Is Working Day:", isWorking);

    if (!isWorking) {
      const dayName = bangkokCheckInTime.toLocaleDateString("th-TH", {
        weekday: "long",
        timeZone: "Asia/Bangkok",
      });

      const isHoliday = await isPublicHoliday(bangkokCheckInTime);
      if (isHoliday) {
        const holidayMessages = [
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö üéâ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`,
          `‡πÄ‡∏Æ‡πâ‡∏¢! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ô‡∏∞ ‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏•‡∏¢ üèñÔ∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô`,
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤‡∏ß‡πÜ ‡∏ô‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ üò¥üçú`,
          `‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô? ‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏Ñ‡∏∞ üòÖ ‡πÑ‡∏õ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ`,
          `‡∏≠‡∏¥‡∏≠‡∏¥ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶‚ú®`,
          `‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡πÑ‡∏ß‡πâ ‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÜ üéÆüé®`,
          `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏∞ ‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏°‡∏±‡πâ‡∏¢? üèÉ‚Äç‚ôÇÔ∏èüí™`,
        ] as const;
        const randomMessage = selectRandomElement(holidayMessages);
        return {
          success: false,
          message: randomMessage,
        };
      }

      const weekendMessages = [
        `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ${dayName}‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üò¥ ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`,
        `‡πÄ‡∏≠‡πà‡∏≠... ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ${dayName}‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ü§î ‡πÑ‡∏õ‡∏ô‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß!`,
        `${dayName}‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô? ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ üí™ ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡∏û‡∏±‡∏Å‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤`,
        `‡∏õ‡∏Å‡∏ï‡∏¥${dayName}‡∏ô‡∏µ‡πà‡∏ô‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡∏ô‡∏∞ üòÜ ‡πÑ‡∏õ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏°‡∏≤‡πÄ‡∏ñ‡∏≠‡∏∞`,
        `${dayName}‡∏´‡∏¢‡∏∏‡∏î‡∏à‡πâ‡∏≤ ‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á üçΩÔ∏èüé¨`,
        `‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î${dayName} ‡πÑ‡∏õ‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏°‡∏±‡πâ‡∏¢? üõçÔ∏è‚ú®`,
        `${dayName}‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÜ ‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏™‡∏õ‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ üßò‚Äç‚ôÄÔ∏èüíÜ‚Äç‚ôÇÔ∏è`,
      ] as const;
      const randomMessage = selectRandomElement(weekendMessages);
      return {
        success: false,
        message: randomMessage,
      };
    }

    const timeValidation = isValidCheckInTime(bangkokCheckInTime);
    console.log("Time Validation:", timeValidation);

    if (!timeValidation.valid) {
      return {
        success: false,
        message: timeValidation.message || "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      };
    }

    let recordedCheckInTimeUTC = utcCheckInTime;
    let calculatedExpectedCheckOutTimeUTC: Date;
    let attendanceStatus: AttendanceStatusType =
      AttendanceStatusType.CHECKED_IN_ON_TIME;

    if (timeValidation.isEarlyCheckIn) {
      recordedCheckInTimeUTC = utcCheckInTime;
      const year = bangkokCheckInTime.getFullYear();
      const month = bangkokCheckInTime.getMonth();
      const date = bangkokCheckInTime.getDate();
      const bangkokCheckout = new Date(year, month, date, 17, 0, 0, 0);
      calculatedExpectedCheckOutTimeUTC = new Date(
        bangkokCheckout.getTime() - 7 * 60 * 60 * 1000,
      );
    } else if (timeValidation.isLateCheckIn) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ö‡∏ß‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ 9 ‡∏ä‡∏°.
      calculatedExpectedCheckOutTimeUTC = calculateExpectedCheckOutTime(
        recordedCheckInTimeUTC,
      );
      attendanceStatus = AttendanceStatusType.CHECKED_IN_LATE;
    } else {
      calculatedExpectedCheckOutTimeUTC = calculateExpectedCheckOutTime(
        recordedCheckInTimeUTC,
      );
    }

    const existingAttendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate,
        },
      },
    });

    if (existingAttendance) {
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á manual checkout ‡πÅ‡∏•‡∏∞ auto checkout)
      if (
        existingAttendance.status === AttendanceStatusType.CHECKED_OUT ||
        existingAttendance.status ===
          AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT
      ) {
        await db.workAttendance.update({
          where: { id: existingAttendance.id },
          data: {
            checkInTime: recordedCheckInTimeUTC,
            checkOutTime: null,
            status: AttendanceStatusType.CHECKED_IN_ON_TIME, // Updated to use AttendanceStatusType
          },
        });

        const afternoonMessages = [
          "‡∏¢‡∏¥‡πâ‡∏°‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á) üåá",
          "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö! üåá ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
          "‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! üòä ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢",
          "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! ‚òÄÔ∏è",
          "‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß üïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠",
          "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üëå",
        ] as const;
        const randomMessage = selectRandomElement(afternoonMessages);

        return {
          success: true,
          message: randomMessage,
          checkInTime: recordedCheckInTimeUTC,
          expectedCheckOutTime: calculatedExpectedCheckOutTimeUTC,
        };
      }

      const alreadyCheckedInMessages = [
        "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß",
        "‡πÄ‡∏Æ‡πâ‡∏¢! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ü§î ‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏£‡∏≠?",
        "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! üòÑ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
        "‡∏≠‡∏¥‡∏≠‡∏¥ ‡∏•‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠? ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‚úÖ",
        "‡πÄ‡∏≠‡πä‡∏∞? ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏µ‡πà‡∏ô‡∏≤ üôÉ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠",
        "‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏°‡∏±‡πâ‡∏¢? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß üòÇüç±",
        "‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®‡∏ô‡∏∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤ üó∫Ô∏è",
      ] as const;
      const randomMessage = selectRandomElement(alreadyCheckedInMessages);
      return {
        success: false,
        message: randomMessage,
        alreadyCheckedIn: true,
        checkInTime: existingAttendance.checkInTime,
        expectedCheckOutTime: calculateExpectedCheckOutTime(
          existingAttendance.checkInTime,
        ),
      };
    }

    await db.workAttendance.create({
      data: {
        userId: userId,
        checkInTime: recordedCheckInTimeUTC,
        workDate: todayDate,
        status: attendanceStatus, // Updated to use the new status
      },
    });

    const bangkokCheckInForDisplay = convertUTCToBangkok(
      recordedCheckInTimeUTC,
    );
    const bangkokCheckOutForDisplay = convertUTCToBangkok(
      calculatedExpectedCheckOutTimeUTC,
    );

    const checkInTimeStr = formatThaiTimeOnly(bangkokCheckInForDisplay);
    const expectedCheckOutStr = formatThaiTimeOnly(bangkokCheckOutForDisplay);
    const successMessages = [
      `‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß üåü ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡πÄ‡∏¢‡πà! ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß üéâ ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®! ‚≠ê ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏™‡∏π‡πâ‡πÜ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞! üí™ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß ‚ú® ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! üòä ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
      `‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! üöÄ ${checkInTimeStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${expectedCheckOutStr} ‡∏ô.)`,
    ] as const;

    let message = selectRandomElement(successMessages);

    if (timeValidation.isEarlyCheckIn) {
      const hour = bangkokCheckInForDisplay.getHours();
      const checkInStr = checkInTimeStr;
      const checkOutStr = "17:00 ‡∏ô.";

      const earlyMessages = [
        `\n‚è∞ ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüåÖ ‡∏°‡∏≤‡πÄ‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\n‚≠ê ‡∏Ç‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á! ‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüêì ‡πÑ‡∏Å‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏±‡∏ô! ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
      ] as const;

      if (hour < 1) {
        message += `\nüåô ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`;
      } else {
        message += selectRandomElement(earlyMessages);
      }
    } else if (timeValidation.isLateCheckIn) {
      const checkInStr = checkInTimeStr;
      const checkOutStr = expectedCheckOutStr;

      const lateMessages = [
        `\n‚è∞ ‡∏Æ‡∏±‡πà‡∏ô‡πÅ‡∏ô‡πà!! ‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß ${checkInStr} ‡∏ô. ‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏∞‡∏™‡∏¥ ‡∏ô‡∏≠‡∏ô‡∏à‡∏ô‡∏´‡∏°‡∏µ‡∏û‡∏≤‡πÑ‡∏õ!! ‡πÅ‡∏ï‡πà‡∏≠‡∏∂‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüåû ‡πÄ‡∏´‡πâ‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢!! ‡∏°‡∏≤‡∏•‡∏∞‡∏°‡∏≤‡∏•‡∏∞‡πÜ ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à‡∏ï‡∏∑‡πà‡∏ô! ${checkInStr} ‡∏ô. ‡∏™‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô! (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\n‚≠ê ‡πÇ‡∏≠‡πâ‡πÇ‡∏´!! ‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏ã‡πà‡∏ö‡πÄ‡∏ß‡πà‡∏≠‡∏£‡πå!! ${checkInStr} ‡∏ô. ‡πÄ‡∏•‡∏ó‡∏ö‡∏±‡∏ó ‡πÄ‡∏Å‡πä‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó! ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ô‡∏∞ ‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¥‡∏≠‡∏¥ (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüòÖ ‡πÇ‡∏≠‡πâ‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢ ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å‡∏û‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏û‡∏±‡∏á!! ${checkInStr} ‡∏ô. ‡∏£‡∏ñ‡∏ï‡∏¥‡∏î? ‡∏ù‡∏ô‡∏ï‡∏Å? ‡∏ï‡∏∑‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß? ‡∏≠‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ! ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏ô‡∏∏‡πÇ‡∏•‡∏°‡πÉ‡∏´‡πâ‡∏Å‡πá‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏±‡∏ô! (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüö® ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå.....‡∏ö‡πà‡∏≤‡∏¢ 3 ‡πÇ‡∏°‡∏á‡∏á‡∏á‡∏á! ‡∏ï‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏á‡∏á‡∏á! ${checkInStr} ‡∏ô. ‡∏°‡∏≤‡∏ä‡πâ‡∏≤‡πÅ‡∏ö‡∏ö VIP! ‡πÅ‡∏ï‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡∏¢‡∏±‡∏á‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß! (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüòé ‡πÅ‡∏´‡∏°‡∏°‡∏°‡∏° ‡∏Ñ‡∏ô‡∏î‡∏µ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏£‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏≤‡∏≤! ‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏ï‡∏¥‡πà‡∏á ${checkInStr} ‡∏ô. ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ô‡∏∞!! ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏≠‡∏≠‡∏≠ (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüê¢ ‡∏°‡∏≤‡πÅ‡∏ö‡∏ö ‡∏™‡∏≤‡∏¢ ‡∏™‡∏≤‡∏¢ ‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏¢‡∏¢‡∏¢! ${checkInStr} ‡∏ô. (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr}) - ‡∏ö‡∏≠‡∏™‡πÉ‡∏à‡∏î‡∏µ‡πÄ‡∏ß‡πà‡∏≠‡∏£‡πå!! ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‡∏Ñ‡∏ô‡∏Ç‡∏µ‡πâ‡∏™‡∏≤‡∏¢‡∏à‡∏∏‡∏á‡πÄ‡∏ö‡∏¢!!`,
        `\nüî• ‡πÄ‡∏Æ‡πâ‡∏¢‡∏¢‡∏¢! ‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏ô‡∏ô ‡∏°‡∏≤‡∏ä‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏µ‡πâ!! ${checkInStr} ‡∏ô. ‡∏ï‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏Ñ‡∏á‡∏á‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ô‡∏∞! (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
        `\nüê£ ‡πÑ‡∏Ç‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏Å‡πÄ‡∏•‡∏¢‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ!! ${checkInStr} ‡∏ô. ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πá‡∏°‡∏≤! (‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô ${checkOutStr})`,
      ] as const;

      message += selectRandomElement(lateMessages);
    }

    return {
      success: true,
      message: message,
      checkInTime: recordedCheckInTimeUTC,
      expectedCheckOutTime: calculatedExpectedCheckOutTimeUTC,
      isEarlyCheckIn: timeValidation.isEarlyCheckIn,
      isLateCheckIn: timeValidation.isLateCheckIn,
      actualCheckInTime: timeValidation.isEarlyCheckIn
        ? recordedCheckInTimeUTC
        : undefined,
    };
  } catch (error) {
    console.error("Error during check-in:", error);
    const gentleErrorMessages = [
      "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏á‡∏±‡∏ß‡πÄ‡∏á‡∏µ‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üå∏ ‡∏£‡∏≠‡∏ã‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡πÄ‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ü¶ã ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡πà‡∏∞ üò¥üí§ ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞",
      "‡∏≠‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üå∫ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
      "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏á‡πÜ ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üåô‚ú® ‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô üåø ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ üïäÔ∏è ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏≠‡πÅ‡∏õ‡πâ‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞",
    ] as const;
    const randomMessage = selectRandomElement(gentleErrorMessages);
    return {
      success: false,
      message: randomMessage,
    };
  }
};

const checkOut = async (userId: string): Promise<CheckInResult> => {
  try {
    const todayDate = getTodayDateString();
    const checkOutTime = getCurrentUTCTime();
    const attendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate,
        },
      },
    });

    if (!attendance) {
      const gentleNotFoundMessages = [
        "‡∏´‡∏∑‡∏°... ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üå∏ ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
        "‡∏≠‡πà‡∏≤‡∏ß ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ü¶ã ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡πÄ‡∏≠‡πä‡∏∞ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞ üò¥ ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏ô‡∏∞",
        "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üå∫ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
        "‡∏î‡∏π‡∏™‡∏¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üåô ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞ üåø ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏∞",
        "‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ üïäÔ∏è ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡πÑ‡∏´‡∏°",
      ] as const;
      const randomMessage = selectRandomElement(gentleNotFoundMessages);
      return {
        success: false,
        message: randomMessage,
      };
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á manual checkout ‡πÅ‡∏•‡∏∞ auto checkout)
    if (
      attendance.status === AttendanceStatusType.CHECKED_OUT ||
      attendance.status === AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT
    ) {
      const storedCheckOutTime = attendance.checkOutTime || checkOutTime;
      const workingHoursMs =
        storedCheckOutTime.getTime() - attendance.checkInTime.getTime();
      const workingHours = workingHoursMs / (1000 * 60 * 60);
      const workHours = roundToOneDecimal(workingHours);

      const alreadyCheckedOutMessages = [
        `‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ üòÑ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!`,
        `‡∏≠‡πà‡∏≤‡∏ß ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üéâ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏•‡∏¢`,
        `‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏≠ üòä ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö ${workHours} ‡∏ä‡∏°. ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞`,
        `‡πÄ‡∏≠‡∏≠ ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏´‡∏•‡∏∞ ‚ú® ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏±‡πâ‡∏¢`,
        `‡πÄ‡∏Æ‡πâ ‡∏≠‡πä‡∏≤‡∏Å‡∏Å‡∏Å ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üí™ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤ ${workHours} ‡∏ä‡∏°. ‡πÄ‡∏Å‡πà‡∏á‡∏™‡∏∏‡∏î‡πÜ`,
        `‡∏´‡∏∑‡∏°... ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üöÄ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${workHours} ‡∏ä‡∏°.`,
        `‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏´‡∏•‡∏∞ üòå ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${workHours} ‡∏ä‡∏°. ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!`,
      ] as const;
      const randomMessage = selectRandomElement(alreadyCheckedOutMessages);
      return {
        success: false,
        message: randomMessage,
        checkInTime: attendance.checkInTime,
        expectedCheckOutTime: storedCheckOutTime,
      };
    }

    const workingHoursMs =
      checkOutTime.getTime() - attendance.checkInTime.getTime();
    const workingHours = workingHoursMs / (1000 * 60 * 60);
    const isCompleteWorkDay =
      workingHours >= WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY;
    await db.workAttendance.update({
      where: {
        id: attendance.id,
      },
      data: {
        checkOutTime: checkOutTime,
        status: AttendanceStatusType.CHECKED_OUT,
      },
    });

    const bangkokCheckInTime = convertUTCToBangkok(attendance.checkInTime);
    const bangkokCheckOutTime = convertUTCToBangkok(checkOutTime);
    const checkInTimeStr = formatThaiTimeOnly(bangkokCheckInTime);
    const checkOutTimeStr = formatThaiTimeOnly(bangkokCheckOutTime);

    const successCheckoutMessages = [
      "‡∏¢‡∏¥‡πâ‡∏°‡πÜ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üéâ",
      "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Å! ‚ú®",
      "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß üí™",
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß üòä",
      "‡πÇ‡∏≠‡πÄ‡∏Ñ! ‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üöÄ",
      "‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üòå",
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üåü",
    ] as const;
    const randomSuccessMessage = selectRandomElement(successCheckoutMessages);

    const workHours = roundToOneDecimal(workingHours);
    let message = `${randomSuccessMessage}\n‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô: ${checkInTimeStr} ‡∏ô.\n‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô: ${checkOutTimeStr} ‡∏ô.\n‡∏£‡∏ß‡∏°: ${workHours} ‡∏ä‡∏°.`;

    if (!isCompleteWorkDay) {
      const shortHours = WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY - workingHours;
      const shortHoursStr = roundToOneDecimal(shortHours);
      const shortWorkMessages = [
        `üí≠ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `ü§î ‡∏≠‡πà‡∏≤‡∏ß ‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `üòä ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏ô‡∏∞ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
        `üå∏ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ (‡∏Ç‡∏≤‡∏î ${shortHoursStr} ‡∏ä‡∏°.)`,
      ] as const;
      const randomShortMessage = selectRandomElement(shortWorkMessages);
      message += `\n${randomShortMessage}`;
    } else {
      const completeWorkMessages = [
        "‚ú® ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!",
        "üéØ ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
        "üí™ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 8 ‡∏ä‡∏°.",
        "üåü ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢",
        "üéâ ‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏±‡∏á! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤",
      ] as const;
      const randomCompleteMessage = selectRandomElement(completeWorkMessages);
      message += `\n${randomCompleteMessage}`;
    }

    return {
      success: true,
      message: message,
      checkInTime: attendance.checkInTime,
      expectedCheckOutTime: checkOutTime,
    };
  } catch (error) {
    console.error("Error during check-out:", error);
    const gentleErrorMessages = [
      "‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏á‡∏±‡∏ß‡πÄ‡∏á‡∏µ‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üå∏ ‡∏£‡∏≠‡∏ã‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡πÄ‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ü¶ã ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡πà‡∏∞ üò¥üí§ ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞",
      "‡∏≠‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üå∫ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
      "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏á‡πÜ ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ üåô‚ú® ‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞",
      "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô üåø ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞",
      "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ üïäÔ∏è ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏≠‡πÅ‡∏õ‡πâ‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞",
    ] as const;
    const randomMessage = selectRandomElement(gentleErrorMessages);
    return {
      success: false,
      message: randomMessage,
    };
  }
};

const getTodayAttendance = async (userId: string) => {
  try {
    const todayDate = getTodayDateString();

    const attendance = await db.workAttendance.findUnique({
      where: {
        userId_workDate: {
          userId: userId,
          workDate: todayDate,
        },
      },
    });

    return attendance;
  } catch (error) {
    console.error("Error getting today attendance:", error);
    return null;
  }
};

const getMonthlyAttendanceReport = async (
  userId: string,
  month: string,
): Promise<MonthlyAttendanceReport | null> => {
  try {
    const [year, monthNum] = month.split("-");
    if (!year || !monthNum) {
      throw new Error("Invalid month format. Use YYYY-MM");
    }
    const firstDay = `${year}-${monthNum.padStart(2, "0")}-01`;
    const lastDay = new Date(parseInt(year), parseInt(monthNum), 0).getDate();
    const lastDayStr = `${year}-${monthNum.padStart(2, "0")}-${lastDay.toString().padStart(2, "0")}`;

    const attendanceRecords = await db.workAttendance.findMany({
      where: {
        userId: userId,
        workDate: {
          gte: firstDay,
          lte: lastDayStr,
        },
      },
      orderBy: {
        workDate: "asc",
      },
    });

    const workingDaysInMonth = await getWorkingDaysInMonth(
      parseInt(year),
      parseInt(monthNum) - 1,
    );
    const processedRecords: AttendanceRecord[] = attendanceRecords.map(
      (record) => {
        let hoursWorked: number | null = null;

        if (record.checkInTime && record.checkOutTime) {
          const timeDiff =
            record.checkOutTime.getTime() - record.checkInTime.getTime();
          hoursWorked = timeDiff / (1000 * 60 * 60);
        }

        return {
          id: record.id,
          workDate: record.workDate,
          checkInTime: record.checkInTime,
          checkOutTime: record.checkOutTime,
          status: record.status,
          hoursWorked: hoursWorked,
        };
      },
    );

    const totalDaysWorked = processedRecords.length;
    const totalHoursWorked = processedRecords.reduce((total, record) => {
      return total + (record.hoursWorked || 0);
    }, 0);
    const attendanceRate = calculatePercentage(
      totalDaysWorked,
      workingDaysInMonth,
    );

    const completeDays = processedRecords.filter(
      (record) =>
        record.hoursWorked &&
        record.hoursWorked >= WORKPLACE_POLICIES.TOTAL_HOURS_PER_DAY,
    ).length;
    const complianceRate = calculatePercentage(completeDays, totalDaysWorked);
    const averageHoursPerDay = calculateAverage(
      totalHoursWorked,
      totalDaysWorked,
    );
    const roundedTotalHours = roundToTwoDecimals(totalHoursWorked);
    const roundedAttendanceRate = roundToTwoDecimals(attendanceRate);
    const roundedComplianceRate = roundToTwoDecimals(complianceRate);
    const roundedAverageHours = roundToTwoDecimals(averageHoursPerDay);

    return {
      userId,
      month,
      totalDaysWorked,
      totalHoursWorked: roundedTotalHours,
      attendanceRecords: processedRecords,
      workingDaysInMonth,
      attendanceRate: roundedAttendanceRate,
      complianceRate: roundedComplianceRate,
      averageHoursPerDay: roundedAverageHours,
      completeDays,
    };
  } catch (error) {
    console.error("Error getting monthly attendance report:", error);
    return null;
  }
};

// Debug function to check current time and validation
const debugTimeValidation = () => {
  const currentBangkokTime = getCurrentBangkokTime();
  const currentUTCTime = getCurrentUTCTime();
  const timeValidation = isValidCheckInTime(currentBangkokTime);
  const todayDate = getTodayDateString();

  console.log("=== Debug Time Validation ===");
  console.log("Current Bangkok Time:", formatThaiTime(currentBangkokTime));
  console.log("Current UTC Time:", currentUTCTime.toISOString());
  console.log("Current Hour (Bangkok):", currentBangkokTime.getHours());
  console.log("Current Minute (Bangkok):", currentBangkokTime.getMinutes());
  console.log("Today Date String:", todayDate);
  console.log("Time Validation:", timeValidation);
  console.log("Is Early Check-in:", timeValidation.isEarlyCheckIn);
  console.log("Is Late Check-in:", timeValidation.isLateCheckIn);
  console.log("============================");

  return {
    currentBangkokTime,
    currentUTCTime,
    timeValidation,
    todayDate,
    formattedTime: formatThaiTime(currentBangkokTime),
  };
};

export const attendanceService = {
  checkIn,
  checkOut,
  getTodayAttendance,
  getMonthlyAttendanceReport,
  debugTimeValidation,
  WORKPLACE_POLICIES,

  isWorkingDay,
  isPublicHoliday,
  isValidCheckInTime,
  calculateExpectedCheckOutTime,
  getWorkingHoursInfo,
  getWorkingDaysInMonth,
  getUsersWithPendingCheckout,
  calculateUserReminderTime,
  shouldReceive10MinReminder,
  shouldReceiveFinalReminder,
  getUsersNeedingDynamicReminder,

  getCurrentBangkokTime,
  getCurrentUTCTime,
  convertUTCToBangkok,
  formatThaiTime,
  formatThaiTimeOnly,
};
