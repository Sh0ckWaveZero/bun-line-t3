/**
 * üõ°Ô∏è Hook ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Hydration Mismatch
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ render components ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ browser APIs ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà client ‡∏à‡∏∞ hydrate
 */

"use client";

import { useEffect, useState } from 'react';

/**
 * üéØ Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏ñ‡∏π‡∏Å mount ‡∏ö‡∏ô client ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ browser APIs ‡πÄ‡∏ä‡πà‡∏ô document, window
 */
export function useIsomorphicLayoutEffect() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    return () => setMounted(false);
  }, []);

  return mounted;
}

/**
 * üîê Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ DOM APIs
 * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ DOM APIs ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
 */
export function useClientOnlyMounted() {
  return useIsomorphicLayoutEffect();
}

/**
 * üåê Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô browser ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SSR errors ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á window object
 */
export function useIsBrowser() {
  const [isBrowser, setIsBrowser] = useState(false);
  
  useEffect(() => {
    setIsBrowser(typeof window !== 'undefined');
  }, []);
  
  return isBrowser;
}

/**
 * üé≠ Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡∏à‡∏≤‡∏Å dynamic content
 * ‡πÄ‡∏ä‡πà‡∏ô timestamps, random values, ‡∏´‡∏£‡∏∑‡∏≠ user-specific data
 */
export function useSafeHydration<T>(
  serverValue: T,
  clientValue: () => T
): T {
  const [value, setValue] = useState(serverValue);
  const mounted = useClientOnlyMounted();
  
  useEffect(() => {
    if (mounted) {
      setValue(clientValue());
    }
  }, [mounted, clientValue]);
  
  return value;
}

/**
 * üö´ Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ suppress hydration warning ‡πÉ‡∏ô cases ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
 * ‡πÄ‡∏ä‡πà‡∏ô timestamps, user-specific content, ‡∏´‡∏£‡∏∑‡∏≠ browser-only features
 * 
 * @param condition - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£ suppress warning
 * @returns boolean ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö suppressHydrationWarning prop
 */
export function useSuppressHydrationWarning(condition?: boolean): boolean {
  const [shouldSuppress, setShouldSuppress] = useState(false);
  
  useEffect(() => {
    if (condition !== undefined) {
      setShouldSuppress(condition);
    } else {
      // Auto-detect common hydration mismatch patterns
      setShouldSuppress(
        typeof window !== 'undefined' && 
        (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')
      );
    }
  }, [condition]);
  
  return shouldSuppress;
}

/**
 * üìÖ Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timestamp ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å hydration mismatch
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á server ‡πÅ‡∏•‡∏∞ client
 */
export function useSafeTimestamp(initialTimestamp?: Date) {
  const mounted = useClientOnlyMounted();
  const suppressWarning = useSuppressHydrationWarning(!mounted);
  
  const timestamp = useSafeHydration(
    initialTimestamp || new Date(),
    () => new Date()
  );
  
  return {
    timestamp,
    suppressHydrationWarning: suppressWarning,
    isHydrated: mounted
  };
}

/**
 * üîß Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö hydration warnings ‡πÉ‡∏ô development
 */
export function useHydrationWarningDetector() {
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      const originalError = console.error
      
      console.error = (...args) => {
        const message = args.join(' ')
        if (message.includes('Hydration') || 
            message.includes('hydrat') ||
            message.includes('mismatch') ||
            message.includes('Text content does not match')) {
          console.warn('üö® Hydration Mismatch Detected:', ...args)
          // Optional: ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á error tracking service
          if ((window as any).gtag) {
            (window as any).gtag('event', 'hydration_mismatch', {
              error_message: message.slice(0, 100)
            })
          }
        }
        originalError(...args)
      }
      
      return () => {
        console.error = originalError
      }
    }
  }, [])
}

/**
 * üîÑ Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Portal ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å hydration mismatch
 */
export function useSafePortal() {
  const mounted = useClientOnlyMounted();
  const isBrowser = useIsBrowser();
  
  const canUsePortal = mounted && isBrowser && typeof document !== 'undefined';
  
  return {
    canUsePortal,
    portalRoot: canUsePortal ? document.body : null
  };
}
