"use client";

import { useState, useEffect, useMemo } from "react";
import { useTheme } from "next-themes";
import { ScheduleXCalendar, useNextCalendarApp } from "@schedule-x/react";
import {
  createViewDay,
  createViewWeek,
  createViewMonthGrid,
  createViewMonthAgenda,
} from "@schedule-x/calendar";
import { createEventsServicePlugin } from "@schedule-x/events-service";
import { translations, mergeLocales } from "@schedule-x/translations";
import "@schedule-x/theme-default/dist/index.css";

export default function LeaveCalendarApp() {
  const { theme } = useTheme();
  console.log("üöÄ ~ LeaveCalendarApp ~ theme:", theme);
  const [events, setEvents] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const eventsService = useState(() => createEventsServicePlugin())[0];

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° calendars config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ event ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const calendars = useMemo(
    () => ({
      personal: {
        colorName: "personal",
        lightColors: {
          main: "#f9d71c",
          container: "#fff5aa",
          onContainer: "#594800",
        },
        darkColors: {
          main: "#fff5c0",
          onContainer: "#fff5de",
          container: "#a29742",
        },
      },
      work: {
        colorName: "work",
        lightColors: {
          main: "#f91c45",
          container: "#ffd2dc",
          onContainer: "#59000d",
        },
        darkColors: {
          main: "#ffc0cc",
          onContainer: "#ffdee6",
          container: "#a24258",
        },
      },
      leisure: {
        colorName: "leisure",
        lightColors: {
          main: "#1cf9b0",
          container: "#dafff0",
          onContainer: "#004d3d",
        },
        darkColors: {
          main: "#c0fff5",
          onContainer: "#e6fff5",
          container: "#42a297",
        },
      },
      school: {
        colorName: "school",
        lightColors: {
          main: "#1c7df9",
          container: "#d2e7ff",
          onContainer: "#002859",
        },
        darkColors: {
          main: "#c0dfff",
          onContainer: "#dee6ff",
          container: "#426aa2",
        },
      },
    }),
    [],
  );

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    const fetchLeaves = async () => {
      setLoading(true);
      try {
        // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        const now = new Date();
        const month = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, "0")}`;
        const res = await fetch(`/api/leave?month=${month}`);
        const data = await res.json();
        if (data.success && Array.isArray(data.leaves)) {
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• leave ‡πÄ‡∏õ‡πá‡∏ô event format ‡∏Ç‡∏≠‡∏á schedule-x ‡∏î‡πâ‡∏ß‡∏¢ helper
          const formattedEvents = data.leaves.map(mapLeaveToEvent);
          console.log("üìÖ Formatted events:", formattedEvents);
          setEvents(formattedEvents);
        } else {
          console.log("‚ùå No leaves data or invalid format");
          setEvents([]);
        }
      } catch (error) {
        console.error("‚ùå Error fetching leaves:", error);
        setEvents([]);
      }
      setLoading(false);
    };
    fetchLeaves();
  }, []);

  // ‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á views ‡πÅ‡∏ö‡∏ö tuple ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
  const views = useMemo(
    () =>
      [
        createViewDay(),
        createViewWeek(),
        createViewMonthGrid(),
        createViewMonthAgenda(),
      ] as [any, ...any[]],
    [],
  );

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° useMemo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö thaiTranslations
  const thaiTranslations = useMemo(
    () => ({
      enUS: {
        // General
        Today: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        Month: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        Week: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        Day: "‡∏ß‡∏±‡∏ô",
        "No events": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        "All day": "‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô",
        Previous: "‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
        Next: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
        Loading: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...",

        // Weekday names
        Monday: "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
        Tuesday: "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
        Wednesday: "‡∏û‡∏∏‡∏ò",
        Thursday: "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
        Friday: "‡∏®‡∏∏‡∏Å‡∏£‡πå",
        Saturday: "‡πÄ‡∏™‡∏≤‡∏£‡πå",
        Sunday: "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",

        // Abbreviated weekday names
        Mon: "‡∏à",
        Tue: "‡∏≠",
        Wed: "‡∏û",
        Thu: "‡∏û‡∏§",
        Fri: "‡∏®",
        Sat: "‡∏™",
        Sun: "‡∏≠‡∏≤",
        MON: "‡∏à.",
        TUE: "‡∏≠.",
        WED: "‡∏û.",
        THU: "‡∏û‡∏§.",
        FRI: "‡∏®.",
        SAT: "‡∏™.",
        SUN: "‡∏≠‡∏≤.",

        // 1-character weekday names for date picker
        M: "‡∏à",
        T: "‡∏≠",
        W: "‡∏û",
        "T short": "‡∏û‡∏§", // Thursday
        F: "‡∏®",
        S: "‡∏™", // Saturday
        "S short": "‡∏≠‡∏≤", // Sunday

        // Month names
        January: "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
        February: "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
        March: "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
        April: "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        May: "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
        June: "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        July: "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
        August: "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        September: "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
        October: "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
        November: "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
        December: "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
        JANUARY: "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
        FEBRUARY: "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
        MARCH: "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
        APRIL: "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        MAY: "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
        JUNE: "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        JULY: "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
        AUGUST: "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        SEPTEMBER: "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
        OCTOBER: "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
        NOVEMBER: "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
        DECEMBER: "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",

        // Abbreviated month names
        Jan: "‡∏°.‡∏Ñ.",
        Feb: "‡∏Å.‡∏û.",
        Mar: "‡∏°‡∏µ.‡∏Ñ.",
        Apr: "‡πÄ‡∏°.‡∏¢.",
        "May short": "‡∏û.‡∏Ñ.",
        Jun: "‡∏°‡∏¥.‡∏¢.",
        Jul: "‡∏Å.‡∏Ñ.",
        Aug: "‡∏™.‡∏Ñ.",
        Sep: "‡∏Å.‡∏¢.",
        Oct: "‡∏ï.‡∏Ñ.",
        Nov: "‡∏û.‡∏¢.",
        Dec: "‡∏ò.‡∏Ñ.",
        "Jan short": "‡∏°.‡∏Ñ.",
        "Feb short": "‡∏Å.‡∏û.",
        "Mar short": "‡∏°‡∏µ.‡∏Ñ.",
        "Apr short": "‡πÄ‡∏°.‡∏¢.",
        "May short2": "‡∏û.‡∏Ñ.",
        "Jun short": "‡∏°‡∏¥.‡∏¢.",
        "Jul short": "‡∏Å.‡∏Ñ.",
        "Aug short": "‡∏™.‡∏Ñ.",
        "Sep short": "‡∏Å.‡∏¢.",
        "Oct short": "‡∏ï.‡∏Ñ.",
        "Nov short": "‡∏û.‡∏¢.",
        "Dec short": "‡∏ò.‡∏Ñ.",

        // Date picker
        "Date picker": "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "Select date": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        OK: "‡∏ï‡∏Å‡∏•‡∏á",
        Cancel: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        Clear: "‡∏•‡πâ‡∏≤‡∏á",

        // Event modal
        "Add event": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Edit event": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event details": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event name": "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event time": "‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event description": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "Event color": "‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "All day event": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô",
        Description: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        Time: "‡πÄ‡∏ß‡∏•‡∏≤",
        Date: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        Start: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
        End: "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", // Note: This is for event start/end time
        Save: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
        Delete: "‡∏•‡∏ö",
        Close: "‡∏õ‡∏¥‡∏î",
        Event: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        Events: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        Add: "‡πÄ‡∏û‡∏¥‡πà‡∏°",
        Remove: "‡∏•‡∏ö",

        // Recurrence
        Repeat: "‡∏ó‡∏≥‡∏ã‡πâ‡∏≥",
        "Does not repeat": "‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ã‡πâ‡∏≥",
        "Repeat every": "‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å",
        day: "‡∏ß‡∏±‡∏ô",
        days: "‡∏ß‡∏±‡∏ô",
        week: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        weeks: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        month: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        months: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        year: "‡∏õ‡∏µ",
        years: "‡∏õ‡∏µ",
        every: "‡∏ó‡∏∏‡∏Å‡πÜ",
        on: "‡πÉ‡∏ô",
        "on the": "‡πÉ‡∏ô",
        the: "", // Usually not needed in Thai
        first: "‡πÅ‡∏£‡∏Å",
        second: "‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á",
        third: "‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°",
        fourth: "‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà",
        last: "‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢",
        for: "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤",
        in: "‡πÉ‡∏ô",
        Ends: "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", // Note: This is for recurrence ending
        Never: "‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        On: "‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        After: "‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å",
        occurrences: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        Custom: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á",
        Daily: "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
        Weekly: "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        Monthly: "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        Yearly: "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ",
        Summary: "‡∏™‡∏£‡∏∏‡∏õ",

        // Calendar views
        "Week agenda": "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "Month agenda": "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        "Select view": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á",

        // Toolbar
        "Go to today": "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        "Go to date": "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "Show weekends": "‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "Hide weekends": "‡∏ã‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "Show week numbers": "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "Hide week numbers": "‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "Show mini calendar": "‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏¢‡πà‡∏≠",
        "Hide mini calendar": "‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏¢‡πà‡∏≠",
      },
    }),
    [],
  );

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á config calendar ‡∏î‡πâ‡∏ß‡∏¢ useMemo
  const calendarConfig = useMemo(() => {
    const config = {
      views,
      events,
      calendars,
      plugins: [eventsService],
      isDark: theme === "dark",
      translations: mergeLocales(translations, thaiTranslations),
      language: "en-US",
      callbacks: {
        onRender: () => {
          console.log("üé® Calendar rendered, events:", eventsService.getAll());
        },
      },
    };
    console.log("‚öôÔ∏è Calendar config:", config);
    return config;
  }, [events, eventsService, views, calendars, theme, thaiTranslations]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å useNextCalendarApp ‡∏ó‡∏µ‡πà top-level ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const calendar = useNextCalendarApp(calendarConfig);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° effect ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync events ‡∏Å‡∏±‡∏ö eventsService
  useEffect(() => {
    if (events.length > 0) {
      console.log("üîÑ Syncing events with eventsService:", events);
      // Clear existing events
      eventsService.getAll().forEach((event) => {
        eventsService.remove(event.id);
      });
      // Add new events
      events.forEach((event) => {
        eventsService.add(event);
      });
    }
  }, [events, eventsService]);

  // helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á leave ‡πÄ‡∏õ‡πá‡∏ô event format ‡∏Ç‡∏≠‡∏á schedule-x
  const mapLeaveToEvent = (leave: any) => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 09:00-18:00 (8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'YYYY-MM-DD HH:mm' ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const startDateTime = `${leave.date} 09:00`;
    const endDateTime = `${leave.date} 18:00`;
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ calendarId ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    let title = "‡∏Ç‡∏≠‡∏•‡∏≤‡∏á‡∏≤‡∏ô";
    let calendarId = "work";
    if (leave.type === "sick") {
      title = "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢";
      calendarId = "personal";
    } else if (leave.type === "vacation") {
      title = "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô";
      calendarId = "leisure";
    } else if (leave.type === "school") {
      title = "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤";
      calendarId = "school";
    }
    return {
      id: leave.id,
      title,
      start: startDateTime,
      end: endDateTime,
      description: leave.reason || "",
      calendarId,
    };
  };

  return (
    <div className="flex h-full min-h-screen w-full flex-1 flex-col items-center justify-center overflow-hidden rounded-lg border-2 border-border bg-card p-4 shadow-2xl transition-all duration-300 sm:p-6 md:p-8">
      {loading ? (
        <div className="animate-pulse py-8 text-center text-base text-muted-foreground sm:text-lg">
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤...
        </div>
      ) : (
        <div className="flex h-full min-h-0 w-full flex-1 flex-col overflow-y-auto">
          <ScheduleXCalendar calendarApp={calendar} />
        </div>
      )}
    </div>
  );
}
