version: '3.8'

# üõ°Ô∏è SECURITY-FIRST Docker Compose ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bun + Next.js + Prisma
# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏° Docker Security Best Practices
#
# üîê ENVIRONMENT VARIABLES STRATEGY:
# ===================================
# 1. GitHub Actions ‡∏à‡∏∞ inject ‡∏Ñ‡πà‡∏≤ environment variables ‡∏à‡∏≤‡∏Å repository secrets
# 2. Docker Compose ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .env.prod)
# 3. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° 16 required secrets: DATABASE_URL, NEXTAUTH_*, JWT_SECRET,
#    INTERNAL_API_KEY, CRON_SECRET, LINE_* (6 secrets), AIRVISUAL_API_KEY,
# 4. Security: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå sensitive ‡πÉ‡∏î‡πÜ ‡∏ö‡∏ô production server

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
        # üîß RASPBERRY PI OPTIMIZATION: ‡∏à‡∏≥‡∏Å‡∏±‡∏î parallel builds ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ARM64
        - MAX_PARALLEL_BUILDS=1
        - NODE_OPTIONS=--max_old_space_size=2048
        - DATABASE_URL=${DATABASE_URL}
      target: runner
      # üîß RASPBERRY PI: ‡∏à‡∏≥‡∏Å‡∏±‡∏î memory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build process
      shm_size: 512m
    container_name: bun-line-t3-app
    ports:
      - "${PORT:-12914}:${PORT:-12914}"  # ‡πÉ‡∏ä‡πâ PORT ‡∏à‡∏≤‡∏Å environment ‡∏´‡∏£‡∏∑‡∏≠ default 12914
    
    # üîê SECURITY: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ GitHub Secrets (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .env.prod)
    # GitHub Actions ‡∏à‡∏∞ inject environment variables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å repository secrets
    
    # üõ°Ô∏è PRODUCTION: Environment variables ‡∏à‡∏≤‡∏Å GitHub Secrets ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å GitHub Actions environment injection (16 secrets + static configs)
    environment:
      # =============================================================================
      # Application Environment (Static + Dynamic)
      # =============================================================================
      - NODE_ENV=production
      - APP_ENV=production
      - NEXT_PUBLIC_APP_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=${PORT:-12914}
      - FRONTEND_URL=${NEXTAUTH_URL}/
      
      # =============================================================================
      # Authentication & Security (GitHub Secrets)
      # =============================================================================
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=18144000000
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
      - CRON_SECRET=${CRON_SECRET}
      
      # =============================================================================
      # LINE Integration (6 GitHub Secrets)
      # =============================================================================
      # LINE Login Provider
      - LINE_CLIENT_ID=${LINE_CLIENT_ID}
      - LINE_CLIENT_SECRET=${LINE_CLIENT_SECRET}
      - LINE_LOGIN_CHANNEL_ID=${LINE_LOGIN_CHANNEL_ID}
      - LINE_LOGIN_CHANNEL_SECRET=${LINE_LOGIN_CHANNEL_SECRET}
      
      # LINE Messaging API
      - LINE_CHANNEL_ACCESS=${LINE_CHANNEL_ACCESS}
      - LINE_MESSAGING_API=https://api.line.me/v2/bot/message
      - LINE_GET_CONTENT=https://api-data.line.me/v2/bot/message
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
      
      # =============================================================================
      # Database Configuration (GitHub Secrets)
      # =============================================================================
      - DATABASE_URL=${DATABASE_URL}
      - MONGODB_URI=${DATABASE_URL}
      - DB_NAME=linebot
      
      # =============================================================================
      # External API Keys (3 GitHub Secrets)
      # =============================================================================
      - AIRVISUAL_API_KEY=${AIRVISUAL_API_KEY}
      - CMC_API_KEY=${CMC_API_KEY}
      - CMC_URL=https://pro-api.coinmarketcap.com
    # üîÑ AUTO-RESTART: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞ restart ‡πÄ‡∏°‡∏∑‡πà‡∏≠ crash
    restart: always
    
    # üîß RASPBERRY PI OPTIMIZATION: ‡∏à‡∏≥‡∏Å‡∏±‡∏î memory usage runtime
    mem_limit: 1.5g
    mem_reservation: 512m
    cpus: 2.0  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î CPU cores ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    
    # üõ°Ô∏è SECURITY: Health check ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:12914/api/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pi ‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤
    
    # üîê SECURITY: Security ‡πÅ‡∏•‡∏∞ resource limits
    security_opt:
      - no-new-privileges:true
    read_only: false  # Next.js standalone ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    tmpfs:
      - /tmp:rw,size=100m,mode=1777
      - /var/tmp:rw,size=50m,mode=1777

    
    # üîê SECURITY: Network isolation - ‡πÉ‡∏ä‡πâ yadom network ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    networks:
      - yadom

  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
      args:
        - BUILDKIT_INLINE_CACHE=1
        # üîß RASPBERRY PI: Memory optimization ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cron build
        - NODE_OPTIONS=--max_old_space_size=1024
    container_name: bun-line-t3-cron
    
    # üîê SECURITY: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ GitHub Secrets (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .env.prod)
    # Cron service ‡∏£‡∏±‡∏ö environment variables ‡∏à‡∏≤‡∏Å GitHub Actions
    
    # üõ°Ô∏è PRODUCTION: Environment variables ‡∏à‡∏≤‡∏Å GitHub Secrets ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (cron service)
    # ‚úÖ MINIMALIST: Cron service ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà CRON_SECRET ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API endpoints
    environment:
      # =============================================================================
      # Minimal Environment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cron Service
      # =============================================================================
      - NODE_ENV=production
      - TZ=Asia/Bangkok
      
      # =============================================================================
      # Security: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CRON_SECRET ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API calls
      # =============================================================================
      - CRON_SECRET=${CRON_SECRET}
    # üîÑ AUTO-RESTART: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞ restart ‡πÄ‡∏°‡∏∑‡πà‡∏≠ crash
    restart: always
    
    # üîß RASPBERRY PI OPTIMIZATION: ‡∏à‡∏≥‡∏Å‡∏±‡∏î memory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cron service
    mem_limit: 512m
    mem_reservation: 128m
    cpus: 1.0
    
    # üõ°Ô∏è SECURITY: ‡∏£‡∏≠‡πÉ‡∏´‡πâ app service ‡∏ú‡πà‡∏≤‡∏ô health check ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° cron
    depends_on:
      app:
        condition: service_healthy
    
    # ‚è∞ CRON HEALTH CHECK: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cron service ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'node.*cron' || exit 1"]
      interval: 300s  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # üîê SECURITY: Security ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cron service
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,size=50m,mode=1777

    # üîê SECURITY: Network isolation - ‡πÉ‡∏ä‡πâ yadom network ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    networks:
      - yadom

# üîê SECURITY: Network configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Raspberry Pi deployment
networks:
  yadom:
    external: true  # ‡πÉ‡∏ä‡πâ network yadom ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
