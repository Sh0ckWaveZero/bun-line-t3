#!/usr/bin/env bun
import { readFileSync, writeFileSync } from "fs";
import { join } from "path";

function readNamesFromFile(filename: string): string[] {
  try {
    const content = readFileSync(filename, "utf-8");
    return content
      .split("\n")
      .map((name) => name.trim())
      .filter((name) => name.length > 0)
      .sort();
  } catch (error) {
    console.error(`Error reading ${filename}:`, error);
    return [];
  }
}

function generateTypescriptFile() {
  console.log("üîÑ Reading Thai names corpus files...");

  const maleNames = readNamesFromFile("male-names.txt");
  const femaleNames = readNamesFromFile("female-names.txt");
  const familyNames = readNamesFromFile("family-names.txt");

  console.log(`‚úÖ Loaded ${maleNames.length} male names`);
  console.log(`‚úÖ Loaded ${femaleNames.length} female names`);
  console.log(`‚úÖ Loaded ${familyNames.length} family names`);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  const commonNicknames = [
    "‡∏Å‡∏¥‡πä‡∏ö",
    "‡∏Å‡∏¥‡πä‡∏ü",
    "‡∏Å‡∏¥‡πä‡∏Å",
    "‡∏Å‡∏¥‡πä‡∏ô",
    "‡πÄ‡∏Å‡πá‡∏ö",
    "‡πÄ‡∏Å‡πà‡∏á",
    "‡πÄ‡∏Å‡πâ‡∏≤",
    "‡πÄ‡∏Å‡∏°",
    "‡∏Ç‡πâ‡∏≤‡∏ß",
    "‡∏Ç‡∏¥‡∏á",
    "‡∏Ç‡πâ‡∏ô",
    "‡πÄ‡∏Ç‡πá‡∏°",
    "‡πÅ‡∏Ç",
    "‡πÇ‡∏Ç‡πà",
    "‡πÑ‡∏Ç‡πà",
    "‡πÑ‡∏Ç‡∏°‡∏∏‡∏Å",
    "‡∏Å‡πâ‡∏≠‡∏á",
    "‡∏Å‡∏ö",
    "‡∏Å‡∏¥‡πà‡∏á",
    "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå",
    "‡πÅ‡∏Å‡∏á",
    "‡πÇ‡∏Å‡πâ",
    "‡πÑ‡∏Å‡πà",
    "‡∏ä‡∏≤‡∏¢",
    "‡∏ä‡∏≤‡∏°",
    "‡∏ä‡πâ‡∏≠‡∏ô",
    "‡∏ä‡∏¥‡∏ô",
    "‡∏ä‡∏¥‡∏°",
    "‡∏ä‡∏¥‡∏Ñ",
    "‡∏ä‡∏¥‡∏ï",
    "‡∏ä‡πá‡∏≠‡∏Ñ",
    "‡πÄ‡∏à",
    "‡πÄ‡∏à‡πä",
    "‡πÄ‡∏à‡∏µ‡πã‡∏¢",
    "‡πÄ‡∏à‡∏°‡∏™‡πå",
    "‡πÄ‡∏à‡∏ô",
    "‡πÄ‡∏à‡∏™‡∏ã‡∏µ‡πà",
    "‡πÄ‡∏à‡∏ô‡∏ô‡∏µ‡πà",
    "‡πÉ‡∏à",
    "‡πÉ‡∏à‡∏î‡∏µ",
    "‡πÑ‡∏à",
    "‡πÑ‡∏à‡πä",
    "‡πÉ‡∏´‡∏ç‡πà",
    "‡πÉ‡∏´‡∏°‡πà",
    "‡πÑ‡∏´‡∏°",
    "‡∏ç‡∏≤‡∏ç‡πà‡∏≤",
    "‡∏ç‡∏¥‡πã‡∏á",
    "‡∏ç‡∏≤‡∏î‡∏≤",
    "‡∏´‡∏ç‡∏¥‡∏á",
    "‡∏´‡∏ç‡πâ‡∏≤",
    "‡∏î‡∏≤‡∏ß",
    "‡∏î‡∏¥‡∏ß",
    "‡∏î‡∏¥‡∏á",
    "‡∏î‡∏≠‡∏á",
    "‡∏î‡∏≠‡∏ô",
    "‡∏î‡∏±‡πä‡∏Å",
    "‡∏î‡∏±‡∏á",
    "‡∏ï‡∏±‡πä‡∏Å",
    "‡∏ï‡∏¥‡πä‡∏Å",
    "‡∏ï‡∏π‡∏ô",
    "‡∏ï‡∏∏‡πä‡∏¢",
    "‡∏ï‡∏∏‡πã‡∏°",
    "‡∏ï‡∏π‡πà",
    "‡∏ï‡πâ‡∏≠‡∏°",
    "‡∏ï‡πâ‡∏ô",
    "‡πÄ‡∏ï‡πâ",
    "‡πÇ‡∏ï",
    "‡∏ï‡πà‡∏≠",
    "‡∏ï‡πâ‡∏≠‡∏¢",
    "‡∏ï‡∏∏‡πâ‡∏°",
    "‡∏ï‡∏π",
    "‡πÄ‡∏ï‡πá‡∏î",
    "‡πÄ‡∏ï‡πá‡∏°",
    "‡∏ô‡∏Å",
    "‡∏´‡∏ô‡∏π",
    "‡∏ô‡πâ‡∏≥",
    "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô",
    "‡πÄ‡∏ô‡πá‡∏ï",
    "‡πÄ‡∏ô‡∏°",
    "‡∏ô‡∏¥‡πà‡∏°",
    "‡∏ö‡∏≠‡∏°",
    "‡∏ö‡∏¥‡πä‡∏ö",
    "‡∏ö‡∏¥‡πä‡∏Å",
    "‡∏ö‡∏µ‡∏°",
    "‡∏ö‡∏µ",
    "‡πÄ‡∏ö‡∏•",
    "‡πÇ‡∏ö‡∏ß‡πå",
    "‡πÄ‡∏ö‡∏≠‡∏£‡πå",
    "‡∏õ‡∏•‡∏≤",
    "‡∏õ‡∏π",
    "‡∏õ‡πä‡∏≠‡∏ö",
    "‡∏õ‡πä‡∏≠‡∏õ",
    "‡∏õ‡∏¥‡∏á",
    "‡∏õ‡∏¥‡∏ô",
    "‡∏õ‡∏¥‡πà‡∏ô",
    "‡∏õ‡∏¥‡∏Å‡∏Å‡∏µ‡πâ",
    "‡∏ú‡∏∂‡πâ‡∏á",
    "‡∏ú‡∏±‡∏î",
    "‡∏ú‡∏°",
    "‡∏ù‡∏ô",
    "‡∏ù‡πâ‡∏≤‡∏¢",
    "‡∏ù‡∏¥‡∏á",
    "‡∏ù‡∏∏‡πà‡∏ô",
    "‡πÅ‡∏ù‡∏î",
    "‡∏û‡∏µ‡πà",
    "‡∏û‡∏∏‡∏á",
    "‡∏û‡∏•‡∏≠‡∏¢",
    "‡∏û‡∏¥‡∏°",
    "‡∏û‡∏¥‡∏ô",
    "‡∏û‡∏¥‡∏ä",
    "‡∏û‡∏¥‡∏Å",
    "‡∏û‡∏¥‡∏ï",
    "‡∏ü‡∏¥‡∏•‡πå‡∏°",
    "‡∏ü‡πâ‡∏≤",
    "‡∏ü‡∏≤‡∏á",
    "‡∏ü‡∏¥‡∏ô",
    "‡∏ü‡∏¥‡πä‡∏Å",
    "‡∏ü‡πâ‡∏≠‡∏á",
    "‡∏ü‡∏≠‡∏á",
    "‡∏ü‡∏¥‡∏ï",
    "‡∏†‡∏π",
    "‡∏†‡∏π‡∏°‡∏¥",
    "‡∏†‡∏û",
    "‡∏°‡∏î",
    "‡∏°‡∏¥‡πä‡∏Å",
    "‡∏°‡∏¥‡πä‡∏Å‡∏ã‡πå",
    "‡∏°‡∏¥‡πâ‡∏ô‡∏ó‡πå",
    "‡∏°‡∏π",
    "‡∏°‡∏¥‡∏ß",
    "‡∏¢‡∏¥‡πâ‡∏°",
    "‡∏¢‡∏π",
    "‡∏¢‡πà‡∏≤",
    "‡∏¢‡∏≤‡∏¢",
    "‡∏¢‡∏π‡πà",
    "‡∏¢‡∏π‡∏ô",
    "‡πÄ‡∏¢‡∏≤‡∏ß‡πå",
    "‡πÇ‡∏¢",
    "‡∏£‡∏±‡∏Å",
    "‡∏£‡πà‡∏≤",
    "‡∏£‡∏∏‡πâ‡∏á",
    "‡∏£‡∏µ‡∏ö",
    "‡∏£‡∏µ‡∏î",
    "‡πÄ‡∏£‡∏µ‡∏¢‡∏°",
    "‡πÄ‡∏£",
    "‡πÇ‡∏£",
    "‡∏•‡∏¥‡∏á",
    "‡∏•‡∏π‡∏Å",
    "‡∏•‡∏∏‡∏á",
    "‡∏•‡∏¥‡πâ‡∏°",
    "‡∏•‡∏¥‡∏õ",
    "‡∏•‡πà‡∏≤‡∏°",
    "‡πÄ‡∏•‡∏ô",
    "‡πÄ‡∏•‡∏°",
    "‡∏ß‡∏¥‡∏ô",
    "‡∏ß‡∏±‡∏î",
    "‡πÄ‡∏ß‡πá‡∏ö",
    "‡πÇ‡∏ß",
    "‡∏ß‡∏≠‡∏ô",
    "‡∏ß‡∏µ‡∏ô",
    "‡πÑ‡∏ß",
    "‡πÑ‡∏ß‡∏ó‡πå",
    "‡∏®‡∏¥‡∏©",
    "‡∏®‡∏¥‡∏•‡∏õ‡πå",
    "‡∏®‡∏µ‡∏•",
    "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡πå",
    "‡πÄ‡∏®‡∏µ‡πà‡∏¢‡∏á",
    "‡∏™‡∏¥‡∏á",
    "‡∏™‡∏µ",
    "‡∏™‡∏∏‡∏Å",
    "‡∏™‡πâ‡∏°",
    "‡∏´‡∏ô‡∏∂‡πà‡∏á",
    "‡∏´‡∏¥‡∏ô",
    "‡∏´‡∏≠‡∏°",
    "‡∏´‡∏°‡∏π",
    "‡∏´‡∏¥‡∏ß",
    "‡∏´‡∏±‡∏ß",
    "‡πÇ‡∏´",
    "‡πÑ‡∏Æ",
    "‡∏≠‡∏≠‡∏¢",
    "‡∏≠‡πâ‡∏≠‡∏°",
    "‡∏≠‡∏¥‡πã‡∏°",
    "‡∏≠‡∏∏‡πã‡∏á",
    "‡∏≠‡∏∂‡πà‡∏á",
    "‡∏≠‡πà‡∏≤‡∏á",
    "‡πÇ‡∏≠",
    "‡πÑ‡∏≠‡∏ã‡πå",
    "‡∏Å‡∏ö",
    "‡∏Å‡∏¥‡πä‡∏ü‡∏ü‡∏µ‡πà",
    "‡∏Å‡∏¥‡πâ‡∏°",
    "‡∏Å‡∏≠‡∏•‡πå‡∏ü",
    "‡πÅ‡∏Å‡πâ‡∏°",
    "‡πÉ‡∏Ç‡πà",
    "‡πÇ‡∏Ç‡πâ‡∏á",
    "‡∏à‡∏¥‡πä‡∏ö",
    "‡∏à‡∏¥‡πã‡∏ß",
    "‡∏à‡∏π‡∏ô",
    "‡πÇ‡∏à",
    "‡πÑ‡∏à‡πã",
    "‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà",
    "‡∏ä‡πâ‡∏≠‡∏¢",
    "‡πÄ‡∏î‡πá‡∏Å",
    "‡∏î‡∏µ‡πÄ‡∏à",
    "‡πÇ‡∏î‡∏ô‡∏±‡∏ó",
    "‡∏ï‡∏≤‡∏•",
    "‡πÇ‡∏ï‡πä‡∏∞",
    "‡πÄ‡∏ó‡πà‡∏á",
    "‡∏ô‡πâ‡∏≠‡∏á",
    "‡∏ö‡∏¥‡∏á",
    "‡∏ö‡∏π",
    "‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå",
    "‡∏õ‡∏≠‡∏ô",
    "‡∏ú‡∏±‡∏î",
    "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤",
    "‡∏ü‡∏¥‡∏ï‡∏ã‡πå",
    "‡∏°‡∏∞‡∏õ‡∏£‡∏≤‡∏á",
    "‡∏°‡∏¥‡∏Å‡∏Å‡∏µ‡πâ",
    "‡πÄ‡∏°‡∏•‡πå",
    "‡∏¢‡πâ‡∏≠‡∏°",
    "‡∏£‡∏π‡∏ò",
    "‡∏•‡∏¥‡∏ã‡πà‡∏≤",
    "‡∏ß‡∏¥‡∏Ñ",
    "‡πÇ‡∏ã‡∏î‡∏≤",
    "‡πÅ‡∏Æ‡∏°",
    "‡∏≠‡∏≠‡∏£‡πå",
    "‡πÑ‡∏Æ‡∏î‡∏µ‡πâ",
    "‡πÇ‡∏Ñ‡πÇ‡∏Ñ‡πà",
    "‡∏õ‡∏±‡∏á‡∏õ‡∏≠‡∏ô‡∏î‡πå",
  ];

  const tsContent = `/**
 * Thai Names Corpus Dataset
 *
 * Data sourced from: https://github.com/korkeatw/thai-names-corpus
 * Original author: Korkeat Wannapat
 * License: Creative Commons Attribution-ShareAlike 4.0 International Public License
 *
 * Dataset contains:
 * - Male names: ${maleNames.length.toLocaleString()} entries
 * - Female names: ${femaleNames.length.toLocaleString()} entries
 * - Family names: ${familyNames.length.toLocaleString()} entries
 * - Common nicknames: ${commonNicknames.length.toLocaleString()} entries
 *
 * Total: ${(maleNames.length + femaleNames.length + familyNames.length + commonNicknames.length).toLocaleString()} entries
 */

export interface ThaiNamesData {
  firstNames: {
    male: string[];
    female: string[];
  };
  surnames: string[];
  nicknames: string[];
}

export const thaiNamesData: ThaiNamesData = {
  firstNames: {
    male: ${JSON.stringify(maleNames, null, 6)},
    female: ${JSON.stringify(femaleNames, null, 6)},
  },
  surnames: ${JSON.stringify(familyNames, null, 4)},
  nicknames: ${JSON.stringify(commonNicknames, null, 4)},
};

/**
 * Get random Thai name by type and gender
 * @param type - Type of name to generate
 * @param gender - Gender for first names (ignored for surnames/nicknames)
 */
export function getRandomThaiName(
  type: 'firstName' | 'surname' | 'nickname',
  gender?: 'male' | 'female'
): string {
  switch (type) {
    case 'firstName':
      const pool = gender === 'female'
        ? thaiNamesData.firstNames.female
        : thaiNamesData.firstNames.male;
      return pool[Math.floor(Math.random() * pool.length)] || '';
    case 'surname':
      return thaiNamesData.surnames[Math.floor(Math.random() * thaiNamesData.surnames.length)] || '';
    case 'nickname':
      return thaiNamesData.nicknames[Math.floor(Math.random() * thaiNamesData.nicknames.length)] || '';
    default:
      return '';
  }
}

/**
 * Generate full Thai name with multiple components
 * @param options - Generation options
 */
export function generateThaiName(options: {
  includeFirstName?: boolean;
  includeSurname?: boolean;
  includeNickname?: boolean;
  gender?: 'male' | 'female';
}) {
  const {
    includeFirstName = true,
    includeSurname = true,
    includeNickname = false,
    gender = Math.random() < 0.5 ? 'male' : 'female'
  } = options;

  const result: {
    firstName?: string;
    surname?: string;
    nickname?: string;
    fullName?: string;
  } = {};

  if (includeFirstName) {
    result.firstName = getRandomThaiName('firstName', gender);
  }

  if (includeSurname) {
    result.surname = getRandomThaiName('surname');
  }

  if (includeNickname) {
    result.nickname = getRandomThaiName('nickname');
  }

  // Generate full name if we have first name or surname
  if (result.firstName || result.surname) {
    result.fullName = [result.firstName, result.surname]
      .filter(Boolean)
      .join(' ');
  }

  return result;
}
`;

  // Write to the data file
  const outputPath = join("src", "lib", "data", "thai-names.ts");
  writeFileSync(outputPath, tsContent);

  console.log(`‚úÖ Generated ${outputPath}`);
  console.log(
    `üìä Total names: ${(maleNames.length + femaleNames.length + familyNames.length + commonNicknames.length).toLocaleString()}`,
  );
}

// Run the script
generateTypescriptFile();

export {};
