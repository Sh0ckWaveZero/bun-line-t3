#!/usr/bin/env bun

/**
 * üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AUTO_CHECKOUT_MIDNIGHT ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (Frontend)
 * 
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:
 * 1. AttendanceTable ‡πÅ‡∏™‡∏î‡∏á AUTO_CHECKOUT_MIDNIGHT ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 * 2. LINE validation ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö status ‡πÉ‡∏´‡∏°‡πà
 * 3. Attendance service ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */

import { db } from '../src/lib/database/db';
import { AttendanceStatusType } from '@prisma/client';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á ObjectId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB
function generateObjectId(): string {
  const timestamp = Math.floor(Date.now() / 1000).toString(16);
  const randomBytes = Array.from({length: 16}, () => Math.floor(Math.random() * 16).toString(16)).join('');
  return (timestamp + randomBytes).substring(0, 24);
}

const TEST_USER_ID = generateObjectId();
const TEST_USER_ID_2 = generateObjectId();

async function testAutoCheckoutMidnightSupport() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AUTO_CHECKOUT_MIDNIGHT ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...\n');

  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ AUTO_CHECKOUT_MIDNIGHT
    console.log('1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AUTO_CHECKOUT_MIDNIGHT...');
    
    const today = new Date().toISOString().split('T')[0] as string;
    const checkInTime = new Date();
    checkInTime.setHours(8, 30, 0, 0); // 08:30
    
    const checkOutTime = new Date();
    checkOutTime.setHours(23, 59, 59, 999); // 23:59:59.999 (auto checkout)
    
    const testRecord = await db.workAttendance.create({
      data: {
        userId: TEST_USER_ID,
        workDate: today,
        checkInTime: checkInTime,
        checkOutTime: checkOutTime,
        status: AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
      id: testRecord.id,
      status: testRecord.status,
      workDate: testRecord.workDate
    });

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ status AUTO_CHECKOUT_MIDNIGHT
    console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    const foundRecords = await db.workAttendance.findMany({
      where: {
        status: AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT,
        workDate: today
      }
    });
    
    console.log(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AUTO_CHECKOUT_MIDNIGHT ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${foundRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    const updatedRecord = await db.workAttendance.update({
      where: { id: testRecord.id },
      data: {
        status: AttendanceStatusType.CHECKED_OUT, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô manual checkout
        updatedAt: new Date()
      }
    });
    
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
      id: updatedRecord.id,
      oldStatus: 'AUTO_CHECKOUT_MIDNIGHT',
      newStatus: updatedRecord.status
    });

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "checked out"
    console.log('\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ checkout...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    const autoCheckoutRecord = await db.workAttendance.create({
      data: {
        userId: TEST_USER_ID_2,
        workDate: today,
        checkInTime: checkInTime,
        checkOutTime: checkOutTime,
        status: AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà checkout ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏° AUTO_CHECKOUT_MIDNIGHT)
    const checkedOutUsers = await db.workAttendance.findMany({
      where: {
        workDate: today,
        status: {
          in: [AttendanceStatusType.CHECKED_OUT, AttendanceStatusType.AUTO_CHECKOUT_MIDNIGHT]
        }
      },
      select: {
        userId: true,
        status: true,
        checkInTime: true,
        checkOutTime: true
      }
    });

    console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà checkout ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏° auto checkout) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${checkedOutUsers.length} ‡∏Ñ‡∏ô`);
    checkedOutUsers.forEach((user, index) => {
      const workHours = user.checkOutTime && user.checkInTime 
        ? ((user.checkOutTime.getTime() - user.checkInTime.getTime()) / (1000 * 60 * 60)).toFixed(1)
        : '0';
      console.log(`   ${index + 1}. User: ${user.userId.substring(0, 10)}... Status: ${user.status} Hours: ${workHours}`);
    });

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà checkout (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° AUTO_CHECKOUT_MIDNIGHT)
    console.log('\n5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà checkout...');
    
    const pendingCheckout = await db.workAttendance.findMany({
      where: {
        workDate: today,
        status: {
          in: [AttendanceStatusType.CHECKED_IN_ON_TIME, AttendanceStatusType.CHECKED_IN_LATE]
        }
      },
      select: {
        userId: true,
        status: true
      }
    });

    console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà checkout ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${pendingCheckout.length} ‡∏Ñ‡∏ô`);

    // 6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('\n6Ô∏è‚É£ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
    
    await db.workAttendance.deleteMany({
      where: {
        userId: {
          in: [TEST_USER_ID, TEST_USER_ID_2]
        },
        workDate: today
      }
    });
    
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AUTO_CHECKOUT_MIDNIGHT ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    process.exit(1);
  }
}

// 7. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
function displaySupportSummary() {
  console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AUTO_CHECKOUT_MIDNIGHT:');
  console.log('‚îÄ'.repeat(60));
  console.log('‚úÖ Prisma Schema: ‡πÄ‡∏û‡∏¥‡πà‡∏° enum AUTO_CHECKOUT_MIDNIGHT');
  console.log('‚úÖ AttendanceTable: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto checkout');
  console.log('‚úÖ LINE Validation: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà');
  console.log('‚úÖ Attendance Service: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status ‡∏£‡∏ß‡∏° auto checkout');
  console.log('‚úÖ LINE Service: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checkout ‡∏£‡∏ß‡∏° auto checkout');
  console.log('‚úÖ Auto Checkout API: ‡∏™‡∏£‡πâ‡∏≤‡∏á records ‡∏î‡πâ‡∏ß‡∏¢ status ‡πÉ‡∏´‡∏°‡πà');
  console.log('‚úÖ Cron Job: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auto checkout API ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô');
  console.log('‚îÄ'.repeat(60));
  console.log('üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AUTO_CHECKOUT_MIDNIGHT ‡πÅ‡∏•‡πâ‡∏ß!');
}

async function main() {
  await testAutoCheckoutMidnightSupport();
  displaySupportSummary();
}

if (import.meta.main) {
  main();
}
